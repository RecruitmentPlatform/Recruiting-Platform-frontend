{"ast":null,"code":"var _jsxFileName = \"/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Applications/Applications.js\",\n    _s = $RefreshSig$();\n\nimport { React } from 'react';\nimport { DataGrid, gridRowsLookupSelector } from '@mui/x-data-grid';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport { gql, useQuery } from '@apollo/client';\nimport ApplicationCard from \"../Card/ApplicationCard\"; // Define GraphQL query for page data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_APPLICATIONS = gql`\nquery GetApplications($candidateId: Int!){\n  applications (where:{candidateId:$candidateId}){\n    id\n    date\n    status\n    openingId\n    opening{\n      title\n      companyId\n      company{\n        title\n      }\n    }\n  }\n}`;\nexport default function Applications() {\n  _s();\n\n  const uid = +sessionStorage.getItem(\"uid\"); // Execute the GraphQL query\n\n  const {\n    loading: applicationsLoading,\n    error: applicationsError,\n    data: applicationsData\n  } = useQuery(GET_APPLICATIONS, {\n    variables: {\n      candidateId: 1\n    }\n  });\n  if (applicationsLoading) return 'Loading applications...';\n  if (applicationsError) return `Error! ${applicationsError.message}`; // Return data and HTML\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: {\n      px: {\n        xs: 1,\n        md: 2\n      },\n      py: 1\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        sx: {\n          mx: 'auto'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            display: \"flex\",\n            mb: 1,\n            px: 1\n          },\n          component: \"h1\",\n          variant: \"h6\",\n          fontWeight: \"bold\",\n          children: \"Applications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            mb: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), applicationsData.applications.map((application, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(ApplicationCard, {\n              title: application.opening.title,\n              company: application.opening.company.title\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 83\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Applications, \"mpi4lDGjKXK0r6uH1E3vTbIE6kw=\", false, function () {\n  return [useQuery];\n});\n\n_c = Applications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Applications\");","map":{"version":3,"sources":["/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Applications/Applications.js"],"names":["React","DataGrid","gridRowsLookupSelector","Container","Paper","Grid","Divider","Typography","gql","useQuery","ApplicationCard","GET_APPLICATIONS","Applications","uid","sessionStorage","getItem","loading","applicationsLoading","error","applicationsError","data","applicationsData","variables","candidateId","message","px","xs","md","py","mx","display","mb","applications","map","application","idx","opening","title","company"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,OAAtB;AACA,SAASC,QAAT,EAAmBC,sBAAnB,QAAiD,kBAAjD;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,eAAP,MAA4B,yBAA5B,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAGH,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAfA;AAiBA,eAAe,SAASI,YAAT,GAAwB;AAAA;;AACrC,QAAMC,GAAG,GAAG,CAACC,cAAc,CAACC,OAAf,CAAuB,KAAvB,CAAb,CADqC,CAErC;;AACA,QAAM;AAAEC,IAAAA,OAAO,EAACC,mBAAV;AAA+BC,IAAAA,KAAK,EAACC,iBAArC;AAAwDC,IAAAA,IAAI,EAACC;AAA7D,MAAkFZ,QAAQ,CAACE,gBAAD,EAAmB;AACjHW,IAAAA,SAAS,EAAE;AAAEC,MAAAA,WAAW,EAAG;AAAhB;AADsG,GAAnB,CAAhG;AAGA,MAAIN,mBAAJ,EAAyB,OAAO,yBAAP;AACzB,MAAIE,iBAAJ,EAAuB,OAAQ,UAASA,iBAAiB,CAACK,OAAQ,EAA3C,CAPc,CASrC;;AACA,sBAAQ,QAAC,SAAD;AAAW,IAAA,EAAE,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,EAAE,EAAE;AAAb,OAAN;AAAwBC,MAAAA,EAAE,EAAC;AAA3B,KAAf;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,EAAE,EAAE,CAAvB;AAA0B,QAAA,EAAE,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,EAAE,EAAE;AAAEC,YAAAA,OAAO,EAAE,MAAX;AAAmBC,YAAAA,EAAE,EAAC,CAAtB;AAAyBN,YAAAA,EAAE,EAAC;AAA5B,WADN;AAEE,UAAA,SAAS,EAAC,IAFZ;AAGE,UAAA,OAAO,EAAC,IAHV;AAIE,UAAA,UAAU,EAAC,MAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,OAAD;AAAS,UAAA,EAAE,EAAE;AAACM,YAAAA,EAAE,EAAC;AAAJ;AAAb;AAAA;AAAA;AAAA;AAAA,gBATF,EAUGV,gBAAgB,CAACW,YAAjB,CAA8BC,GAA9B,CAAkC,CAACC,WAAD,EAAcC,GAAd,KAAsB;AAAC,8BAAQ;AAAA,mCAChE,QAAC,eAAD;AAEE,cAAA,KAAK,EAAID,WAAW,CAACE,OAAZ,CAAoBC,KAF/B;AAGE,cAAA,OAAO,EAAIH,WAAW,CAACE,OAAZ,CAAoBE,OAApB,CAA4BD;AAHzC,eACSF,GADT;AAAA;AAAA;AAAA;AAAA;AADgE;AAAA;AAAA;AAAA;AAAA,kBAAR;AAMlD,SANP,CAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAAR;AAwBD;;GAlCuBvB,Y;UAGkEH,Q;;;KAHlEG,Y","sourcesContent":["import { React } from 'react';\nimport { DataGrid, gridRowsLookupSelector } from '@mui/x-data-grid';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Typography from '@mui/material/Typography';\nimport { gql, useQuery } from '@apollo/client';\nimport ApplicationCard from \"../Card/ApplicationCard\";\n\n// Define GraphQL query for page data\nconst GET_APPLICATIONS = gql`\nquery GetApplications($candidateId: Int!){\n  applications (where:{candidateId:$candidateId}){\n    id\n    date\n    status\n    openingId\n    opening{\n      title\n      companyId\n      company{\n        title\n      }\n    }\n  }\n}`;\n\nexport default function Applications() {\n  const uid = +sessionStorage.getItem(\"uid\");\n  // Execute the GraphQL query\n  const { loading:applicationsLoading, error:applicationsError, data:applicationsData } = useQuery(GET_APPLICATIONS, {\n    variables: { candidateId : 1 },\n  });\n  if (applicationsLoading) return 'Loading applications...';\n  if (applicationsError) return `Error! ${applicationsError.message}`;\n\n  // Return data and HTML\n  return (<Container sx={{ px: { xs: 1, md: 2 }, py:1 }}>\n            <Grid container>\n              <Grid item xs={12} md={6} sx={{ mx: 'auto'}}>\n                <Typography\n                  sx={{ display: \"flex\", mb:1, px:1 }}\n                  component=\"h1\"\n                  variant=\"h6\"\n                  fontWeight=\"bold\"\n                  >\n                  Applications\n                </Typography>\n                <Divider sx={{mb:2}}/>\n                {applicationsData.applications.map((application, idx) => {return (<div>\n                  <ApplicationCard\n                    key = {idx}\n                    title = {application.opening.title}\n                    company = {application.opening.company.title}\n                    />\n                </div>)})\n                }\n              </Grid>\n            </Grid>\n          </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}