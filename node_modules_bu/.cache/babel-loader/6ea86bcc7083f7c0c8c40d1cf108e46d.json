{"ast":null,"code":"var _jsxFileName = \"/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Homepage/Homepage.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext, useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\"; //for routing\n\nimport { AuthContext } from \"../../AuthContext\";\nimport axios from \"axios\";\nimport TextField from '@mui/material/TextField';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport JobCard from \"../Card/JobCard\";\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport Paper from \"@mui/material/Paper\";\nimport InputBase from \"@mui/material/InputBase\";\nimport IconButton from \"@mui/material/IconButton\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport Avatar from '@mui/material/Avatar';\nimport { Card, CardContent, CardHeader, CardActions, CardActionArea } from '@mui/material';\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\nimport PostCard from \"../Card/PostCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction stringToColor(string) {\n  let hash = 0;\n  let i;\n  /* eslint-disable no-bitwise */\n\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = hash >> i * 8 & 0xff;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n\n  return color;\n}\n\nfunction stringAvatar(name) {\n  return {\n    sx: {\n      bgcolor: stringToColor(name)\n    },\n    children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`\n  };\n} // Post GQL Commands\n\n\nconst GET_ALL_POSTS = gql`\n  query GetAllPosts{\n    posts {\n      id\n      date\n      status\n      content\n      candidate {\n        first\n        last\n      }\n      opening {\n        id\n        title\n        description\n        companyId\n        location\n        employment {\n          title\n        }\n        company{\n          title\n        }\n      }\n    }\n  }`;\nconst ADD_POST = gql`\n  mutation AddPost($candidateId:Int!,$date:Int!,$status:Int!,$content:String!,$openingId:Int) {\n    createPost(candidateId:$candidateId,date:$date,status:$status,content:$content,openingId:$openingId) {\n      id\n    }\n  }`; // Job Post GQL Commands\n\nconst GET_CANDIDATE_OPENINGS = gql`\n  query GetCandidateOpenings($id:Int!){\n    candidate(id:$id) {\n      openings {\n        id\n        title\n        description\n        location\n        salaryLow\n        salaryHigh\n        startMonth\n        startYear\n        company {\n          title\n        }\n        employment {\n          title\n        }\n      }\n    }\n  }`;\nexport default function Homepage() {\n  _s();\n\n  const [refreshPosts, {\n    loading: postsLoading,\n    data: postsData\n  }] = useLazyQuery(GET_ALL_POSTS, {\n    fetchPolicy: 'network-only'\n  });\n  const {\n    data: openingsData,\n    loading: openingsLoading\n  } = useQuery(GET_CANDIDATE_OPENINGS, {\n    variables: {\n      id: 1\n    }\n  });\n  const [createPost] = useMutation(ADD_POST);\n  const uid = +sessionStorage.getItem(\"uid\");\n\n  const handleSubmitPost = e => {\n    e.preventDefault(); // Check if ID is set for updating\n\n    createPost({\n      variables: {\n        candidateId: 1,\n        date: 123,\n        status: 1,\n        content: e.target.content.value,\n        openingId: parseInt(e.target.openingId.value)\n      }\n    }); //Refresh the posts list\n\n    refreshPosts();\n  };\n\n  useEffect(() => {\n    refreshPosts();\n  }, []);\n  if (openingsLoading) return 'Loading openings...';\n  if (postsLoading) return 'Loading posts...';\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      bgcolor: 'background.primary',\n      pt: 8,\n      pb: 6\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h2\",\n        align: \"center\",\n        color: \"text.primary\",\n        gutterBottom: true,\n        children: \"Begin Searching\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        sx: {\n          mb: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmitPost,\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            sx: {\n              pb: 0\n            },\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, { ...stringAvatar(\"Alex Castro\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this),\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontWeight: 'bold',\n                fontSize: '15px'\n              },\n              component: \"h2\",\n              children: \"Create post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              pt: 1,\n              pb: 0\n            },\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              required: true,\n              label: \"What's on your mind?\",\n              multiline: true,\n              rows: 4,\n              variant: \"standard\",\n              fullWidth: true,\n              name: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            sx: {\n              px: 2,\n              pb: 1\n            },\n            children: [openingsData ? /*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              name: \"openingId\",\n              size: \"small\",\n              label: \"Share an Opening\",\n              sx: {\n                width: '100%',\n                maxWidth: '250px',\n                mr: 1\n              },\n              children: openingsData.candidate.openings.map((opening, openingid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: opening.id,\n                children: opening.title\n              }, openingid, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              sx: {\n                ml: 'auto'\n              },\n              type: \"submit\",\n              children: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), postsData.posts.map((post, postid) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PostCard, {\n            id: post.id,\n            name: post.candidate.first + \" \" + post.candidate.last,\n            date: post.date,\n            content: post.content,\n            openingId: post.opening ? post.opening.id : null,\n            job_title: post.opening ? post.opening.title : null,\n            job_description: post.opening ? post.opening.description : null,\n            job_company: post.opening ? post.opening.company.title : null,\n            job_location: post.opening ? post.opening.location : null,\n            job_employment: post.opening ? post.opening.employment ? post.opening.employment.title : null : null\n          }, postid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 57\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Homepage, \"F9Wa1RPlXkulEhNWQ4N/C36Kcf4=\", false, function () {\n  return [useLazyQuery, useQuery, useMutation];\n});\n\n_c = Homepage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"sources":["/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Homepage/Homepage.js"],"names":["React","useState","useContext","useEffect","Link","useHistory","AuthContext","axios","TextField","AppBar","Button","MenuItem","Grid","Stack","Box","JobCard","Typography","Container","Paper","InputBase","IconButton","SearchIcon","Avatar","Card","CardContent","CardHeader","CardActions","CardActionArea","gql","useQuery","useLazyQuery","useMutation","PostCard","stringToColor","string","hash","i","length","charCodeAt","color","value","toString","substr","stringAvatar","name","sx","bgcolor","children","split","GET_ALL_POSTS","ADD_POST","GET_CANDIDATE_OPENINGS","Homepage","refreshPosts","loading","postsLoading","data","postsData","fetchPolicy","openingsData","openingsLoading","variables","id","createPost","uid","sessionStorage","getItem","handleSubmitPost","e","preventDefault","candidateId","date","status","content","target","openingId","parseInt","pt","pb","mb","fontWeight","fontSize","px","width","maxWidth","mr","candidate","openings","map","opening","openingid","title","ml","posts","post","postid","first","last","description","company","location","employment"],"mappings":"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","sourcesContent":["import {React, useState, useContext, useEffect} from \"react\";\nimport {Link, useHistory } from \"react-router-dom\"; //for routing\nimport { AuthContext } from \"../../AuthContext\";\nimport axios from \"axios\"\n\nimport TextField from '@mui/material/TextField';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport MenuItem from '@mui/material/MenuItem';\n\nimport Grid from '@mui/material/Grid';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\n\nimport JobCard from \"../Card/JobCard\";\n\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\n\nimport Paper from \"@mui/material/Paper\";\nimport InputBase from \"@mui/material/InputBase\";\nimport IconButton from \"@mui/material/IconButton\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport Avatar from '@mui/material/Avatar';\n\nimport {Card, CardContent, CardHeader, CardActions, CardActionArea } from '@mui/material';\n\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\n\nimport PostCard from \"../Card/PostCard\";\n\nfunction stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n\nfunction stringAvatar(name) {\n  return {\n    sx: {\n      bgcolor: stringToColor(name),\n    },\n    children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,\n  };\n}\n\n// Post GQL Commands\nconst GET_ALL_POSTS = gql`\n  query GetAllPosts{\n    posts {\n      id\n      date\n      status\n      content\n      candidate {\n        first\n        last\n      }\n      opening {\n        id\n        title\n        description\n        companyId\n        location\n        employment {\n          title\n        }\n        company{\n          title\n        }\n      }\n    }\n  }`;\n\nconst ADD_POST = gql`\n  mutation AddPost($candidateId:Int!,$date:Int!,$status:Int!,$content:String!,$openingId:Int) {\n    createPost(candidateId:$candidateId,date:$date,status:$status,content:$content,openingId:$openingId) {\n      id\n    }\n  }`;\n\n// Job Post GQL Commands\nconst GET_CANDIDATE_OPENINGS = gql`\n  query GetCandidateOpenings($id:Int!){\n    candidate(id:$id) {\n      openings {\n        id\n        title\n        description\n        location\n        salaryLow\n        salaryHigh\n        startMonth\n        startYear\n        company {\n          title\n        }\n        employment {\n          title\n        }\n      }\n    }\n  }`;\n\nexport default function Homepage() {\n  const [refreshPosts, { loading:postsLoading, data:postsData }] = useLazyQuery(GET_ALL_POSTS, {fetchPolicy: 'network-only'});\n\n  const { data:openingsData, loading:openingsLoading } = useQuery(GET_CANDIDATE_OPENINGS, {variables:{id:1}});\n\n  const [createPost] = useMutation(ADD_POST);\n\n  const uid = +sessionStorage.getItem(\"uid\");\n\n  const handleSubmitPost = (e) =>{\n    e.preventDefault();\n    // Check if ID is set for updating\n\n    createPost({\n      variables: {\n        candidateId: 1,\n        date: 123,\n        status: 1,\n        content: e.target.content.value,\n        openingId: parseInt(e.target.openingId.value),\n     }\n   });\n    //Refresh the posts list\n    refreshPosts();\n  };\n\n  useEffect(() => { refreshPosts();}, []);\n\n  if(openingsLoading) return 'Loading openings...';\n  if(postsLoading) return 'Loading posts...';\n\n  return (\n    <Box\n      sx={{\n        bgcolor: 'background.primary',\n        pt: 8,\n        pb: 6,\n      }}\n    >\n      <Container maxWidth=\"sm\">\n        <Typography\n          component=\"h1\"\n          variant=\"h2\"\n          align=\"center\"\n          color=\"text.primary\"\n          gutterBottom\n        >\n          Begin Searching\n        </Typography>\n        <Card sx={{ mb:2 }}>\n          <form onSubmit={handleSubmitPost}>\n          <CardHeader\n            sx={{pb:0}}\n            avatar={\n              <Avatar {...stringAvatar(\"Alex Castro\")} />\n            }\n            title={<Typography sx={{fontWeight:'bold', fontSize:'15px'}} component=\"h2\">\n                    Create post\n                  </Typography>}\n            />\n            <CardContent sx={{pt:1,pb:0}}>\n              <TextField\n                required\n                label=\"What's on your mind?\"\n                multiline\n                rows={4}\n                variant=\"standard\"\n                fullWidth\n                name=\"content\"\n              />\n            </CardContent>\n            <CardActions sx={{px:2, pb:1}}>\n              {openingsData?\n                <TextField\n                  select\n                  name=\"openingId\"\n                  size=\"small\"\n                  label=\"Share an Opening\"\n                  sx={{width:'100%', maxWidth:'250px', mr:1}}\n                >\n                  {openingsData.candidate.openings.map((opening, openingid) => (\n                    <MenuItem\n                      key={openingid}\n                      value={opening.id}\n                    >\n                      {opening.title}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              :null}\n              <Button variant=\"contained\" sx={{ml:'auto'}} type=\"submit\">Post</Button>\n            </CardActions>\n          </form>\n        </Card>\n\n        {postsData.posts.map((post, postid) => {return (<div>\n          <PostCard\n            key = {postid}\n            id = {post.id}\n            name = {post.candidate.first + \" \" + post.candidate.last}\n            date = {post.date}\n            content = {post.content}\n            openingId = {post.opening?post.opening.id:null}\n            job_title = {post.opening?post.opening.title:null}\n            job_description = {post.opening?post.opening.description:null}\n            job_company = {post.opening?post.opening.company.title:null}\n            job_location = {post.opening?post.opening.location:null}\n            job_employment = {post.opening?post.opening.employment?post.opening.employment.title:null:null}\n             />\n        </div>)})}\n\n      </Container>\n    </Box>)\n  }\n"]},"metadata":{},"sourceType":"module"}