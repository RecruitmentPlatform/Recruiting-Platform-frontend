{"ast":null,"code":"var _jsxFileName = \"/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Interviews/Interviews.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { DataGrid, gridRowsLookupSelector } from '@mui/x-data-grid';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_INTERVIEWS = gql`\nquery GetInterviews {\n  interviews {\n    id\n    start\n    end\n    applicationId\n    application {\n      candidateId\n      candidate {\n        first\n        last\n      }\n      openingId\n      opening {\n        title\n        companyId\n        company {\n          title\n        }\n      }\n    }\n  }\n}`;\nconst columns = [{\n  field: 'candidateName',\n  headerName: 'Candidate',\n  width: 200\n}, {\n  field: 'openingTitle',\n  headerName: 'Opening',\n  width: 200\n}, {\n  field: 'companyTitle',\n  headerName: 'Company',\n  width: 200\n}, {\n  field: 'applicationDate',\n  headerName: 'Application Date',\n  type: 'number',\n  width: 90\n}, {\n  field: 'interviewDate',\n  headerName: 'Interview Date',\n  type: 'number',\n  width: 90\n}];\n/* const rows = [\n   { id: 1, companyTitle: 'Google', openingTitle: 'Software Engineering', applicationDate: '4/14/1995', applicationStatus: 1 }\n ]; */\n\nexport default function Interviews() {\n  _s();\n\n  const uid = +sessionStorage.getItem(\"uid\"); // Execute the GraphQL query\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_INTERVIEWS, {\n    variables: {\n      candidateId: 1\n    }\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`; // Create empty list of row data\n\n  const rows = []; // Populate row data\n\n  for (let i = 0; i < data[\"interviews\"].length; i++) {\n    let newRow = {};\n    console.log(data[\"interviews\"]);\n    newRow[\"id\"] = i;\n    newRow[\"candidateName\"] = data[\"interviews\"][i][\"application\"][\"candidate\"][\"first\"];\n    newRow[\"openingTitle\"] = data[\"interviews\"][i][\"application\"][\"opening\"][\"title\"];\n    newRow[\"companyTitle\"] = data[\"interviews\"][i][\"application\"][\"opening\"][\"company\"][\"title\"];\n    newRow[\"applicationDate\"] = data[\"interviews\"][i][\"application\"][\"date\"];\n    newRow[\"interviewDate\"] = data[\"interviews\"][i][\"start\"];\n    rows.push(newRow);\n  } // Return data and HTML\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    sx: {\n      p: {\n        xs: 2,\n        md: 3\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      component: \"h1\",\n      variant: \"h6\",\n      color: \"text.primary\",\n      gutterBottom: true,\n      children: \"Your Interviews\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 400,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: rows,\n        columns: columns,\n        pageSize: 5,\n        rowsPerPageOptions: [5, 10],\n        checkboxSelection: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Interviews, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Interviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interviews\");","map":{"version":3,"sources":["/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Interviews/Interviews.js"],"names":["React","DataGrid","gridRowsLookupSelector","Container","Paper","Typography","gql","useQuery","GET_INTERVIEWS","columns","field","headerName","width","type","Interviews","uid","sessionStorage","getItem","loading","error","data","variables","candidateId","message","rows","i","length","newRow","console","log","push","p","xs","md","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DataGrid, gridRowsLookupSelector } from '@mui/x-data-grid';\nimport Container from '@mui/material/Container';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport { gql, useQuery } from '@apollo/client';\n\nconst GET_INTERVIEWS = gql`\nquery GetInterviews {\n  interviews {\n    id\n    start\n    end\n    applicationId\n    application {\n      candidateId\n      candidate {\n        first\n        last\n      }\n      openingId\n      opening {\n        title\n        companyId\n        company {\n          title\n        }\n      }\n    }\n  }\n}`;\n\nconst columns = [\n  { field: 'candidateName', headerName: 'Candidate', width: 200 },\n  { field: 'openingTitle', headerName: 'Opening', width: 200 },\n  { field: 'companyTitle', headerName: 'Company', width: 200 },\n  {\n    field: 'applicationDate',\n    headerName: 'Application Date',\n    type: 'number',\n    width: 90\n  },\n  {\n    field: 'interviewDate',\n    headerName: 'Interview Date',\n    type: 'number',\n    width: 90\n  }\n];\n\n/* const rows = [\n   { id: 1, companyTitle: 'Google', openingTitle: 'Software Engineering', applicationDate: '4/14/1995', applicationStatus: 1 }\n ]; */\n\nexport default function Interviews() {\n  const uid = +sessionStorage.getItem(\"uid\");\n  // Execute the GraphQL query\n  const { loading, error, data } = useQuery(GET_INTERVIEWS, {\n    variables: { candidateId : 1 },\n  });\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n\n  // Create empty list of row data\n  const rows = [];\n\n  // Populate row data\n  for(let i=0; i<data[\"interviews\"].length; i++){\n    let newRow = {}\n    console.log(data[\"interviews\"])\n    newRow[\"id\"] = i;\n\n    newRow[\"candidateName\"] = data[\"interviews\"][i][\"application\"][\"candidate\"][\"first\"];\n\n    newRow[\"openingTitle\"] = data[\"interviews\"][i][\"application\"][\"opening\"][\"title\"];\n\n    newRow[\"companyTitle\"] = data[\"interviews\"][i][\"application\"][\"opening\"][\"company\"][\"title\"];\n\n    newRow[\"applicationDate\"] = data[\"interviews\"][i][\"application\"][\"date\"];\n\n    newRow[\"interviewDate\"] = data[\"interviews\"][i][\"start\"];\n\n    rows.push(newRow);\n  }\n\n  // Return data and HTML\n  return (\n    <Container sx={{ p: { xs: 2, md: 3 } }}>\n      <Typography\n        component=\"h1\"\n        variant=\"h6\"\n        color=\"text.primary\"\n        gutterBottom\n      >\n        Your Interviews\n      </Typography>\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        pageSize={5}\n        rowsPerPageOptions={[5,10]}\n        checkboxSelection\n      />\n    </div>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}