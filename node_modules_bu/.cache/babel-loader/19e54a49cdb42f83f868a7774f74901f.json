{"ast":null,"code":"var _jsxFileName = \"/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Profile/Profile.js\",\n    _s = $RefreshSig$();\n\nimport { React, Fragment, useState, useEffect } from \"react\";\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport PublicIcon from '@mui/icons-material/Public';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Divider from '@mui/material/Divider';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Chip from '@mui/material/Chip';\nimport { Card, CardMedia, CardHeader, CardContent, CardActionArea, CardActions } from '@mui/material';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material';\nimport Add from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport ExperienceCard from \"../Card/ExperienceCard\";\nimport JobListCard from \"../Card/JobListCard\";\nimport PostCard from \"../Card/PostCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction stringToColor(string) {\n  let hash = 0;\n  let i;\n  /* eslint-disable no-bitwise */\n\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = hash >> i * 8 & 0xff;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n\n  return color;\n}\n\nfunction stringAvatar(name) {\n  return {\n    sx: {\n      bgcolor: stringToColor(name)\n    },\n    children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`\n  };\n} // Candidate GQL Commands\n\n\nconst GET_CANDIDATE = gql`\n  query GetCandidate($id:Int!){\n    candidate(id:$id) {\n      first\n      last\n      headline\n      location\n      description\n      genderId\n      gender {\n        title\n      }\n      pronounId\n      pronoun {\n        title\n      }\n      ethnicityId\n      ethnicity {\n        title\n      }\n    }\n  }`;\nconst UPDATE_CANDIDATE = gql`\nmutation UpdateCandidate($id:Int!,$first:String!,$last:String!,$headline:String,$location:String,$description:String, $genderId: Int, $pronounId: Int, $ethnicityId: Int){\n  updateCandidate(id:$id,first:$first,last:$last,headline:$headline,location:$location,description:$description,genderId: $genderId, pronounId: $pronounId, ethnicityId: $ethnicityId) {\n    id\n  }\n}`;\nconst GET_ALL_GENDERS = gql`\n  query GetAllGenders{\n    genders{\n      id\n      title\n    }\n  }`;\nconst GET_ALL_ETHNICITIES = gql`\n  query GetAllEthnicities{\n    ethnicities {\n      id\n      title\n    }\n  }`;\nconst GET_ALL_PRONOUNS = gql`\n  query GetAllPronouns{\n    pronouns {\n      id\n      title\n    }\n  }`; // Experience GQL Commands\n\nconst GET_EXPERIENCES = gql`\n  query GetExperiences($id:Int!){\n        candidate(id:$id) {\n          experiences {\n            id\n            title\n            startMonth\n            startYear\n            endMonth\n            endYear\n            description\n            location\n            employment {\n              id\n              title\n            }\n            company {\n              id\n              title\n            }\n          }\n        }\n      }`;\nconst ADD_EXPERIENCE = gql`\n    mutation CreateExperience(\n        $title:String!,\n        $candidateId:Int!,\n        $companyId:Int!,\n        $startMonth:Int!,\n        $startYear:Int!,\n        $endMonth:Int,\n        $endYear:Int,\n        $employmentId:Int,\n        $location:String,\n        $description:String\n      ) {\n        createExperience(\n          title:$title,\n          candidateId:$candidateId,\n          companyId:$companyId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          employmentId:$employmentId,\n          location:$location,\n          description:$description\n        ){\n          id\n        }}`;\nconst EDIT_EXPERIENCE = gql`\n    mutation UpdateExperience(\n        $id:Int,\n        $title:String!,\n        $candidateId:Int!,\n        $companyId:Int!,\n        $startMonth:Int!,\n        $startYear:Int!,\n        $endMonth:Int,\n        $endYear:Int,\n        $employmentId:Int,\n        $location:String,\n        $description:String) {\n        updateExperience(\n          id:$id,\n          title:$title,\n          candidateId:$candidateId,\n          companyId:$companyId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          employmentId:$employmentId,\n          location:$location,\n          description:$description) {\n              id\n            }}`;\nconst DELETE_EXPERIENCE = gql`\n    mutation DeleteExperience($id:Int!) {\n      deleteExperience(id:$id) {\n        success\n      }\n    }`; // Education GQL Commands\n\nconst GET_EDUCATIONS = gql`\n  query GetEducations($id:Int!){\n    candidate(id:$id) {\n      educations {\n        id\n        candidateId\n        collegeName\n        majorName\n        collegeId\n        degreeId\n        degree {\n          title\n        }\n        startMonth\n        startYear\n        endMonth\n        endYear\n        description\n      }\n    }\n  }`;\nconst ADD_EDUCATION = gql`\n    mutation CreateEducation(\n      $candidateId:Int!,\n      $collegeName:String!,\n      $collegeId:Int,\n      $degreeId:Int,\n      $majorName:String,\n      $startMonth:Int,\n      $startYear:Int,\n      $endMonth:Int,\n      $endYear:Int,\n      $description:String\n      ) {\n        createEducation(\n          candidateId:$candidateId,\n          collegeName:$collegeName,\n          collegeId:$collegeId,\n          majorName:$majorName\n          degreeId:$degreeId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          description:$description\n        ){\n          id\n        }}`;\nconst EDIT_EDUCATION = gql`\n    mutation UpdateEducation(\n        $id:Int,\n        $candidateId:Int!,\n        $collegeName:String!,\n        $collegeId:Int,\n        $majorName:String,\n        $degreeId:Int,\n        $startMonth:Int,\n        $startYear:Int,\n        $endMonth:Int,\n        $endYear:Int,\n        $description:String\n        ) {\n        updateEducation(\n          id:$id,\n          candidateId:$candidateId,\n          collegeName:$collegeName,\n          collegeId:$collegeId,\n          majorName:$majorName\n          degreeId:$degreeId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          description:$description\n          ) {\n              id\n            }}`;\nconst DELETE_EDUCATION = gql`\n    mutation DeleteEducation($id:Int!) {\n      deleteEducation(id:$id) {\n        success\n      }\n    }`; // Job Post GQL Commands\n\nconst GET_CANDIDATE_OPENINGS = gql`\n  query GetCandidateOpenings($id:Int!){\n    candidate(id:$id) {\n      openings {\n        id\n        title\n        description\n        location\n        salaryLow\n        salaryHigh\n        startMonth\n        startYear\n        company {\n          title\n        }\n        employment {\n          title\n        }\n      }\n    }\n  }`; // Post GQL Commands\n\nconst GET_CANDIDATE_POSTS = gql`\n  query GetCandidatePosts($id:Int!){\n    candidate(id:$id) {\n      posts {\n        id\n        date\n        status\n        content\n        opening {\n          id\n          title\n          description\n          companyId\n          location\n          employment {\n            title\n          }\n          company{\n            title\n          }\n        }\n      }\n    }\n  }`;\nconst ADD_POST = gql`\n  mutation AddPost($candidateId:Int!,$date:Int!,$status:Int!,$content:String!,$openingId:Int) {\n    createPost(candidateId:$candidateId,date:$date,status:$status,content:$content,openingId:$openingId) {\n      id\n    }\n  }`;\nconst DELETE_POST = gql`\n  mutation DeletePost($id:Int!) {\n    deletePost(id:$id) {\n      success\n    }\n  }`; // Skill GQL Commands\n\nconst GET_SKILLS = gql`\n  query GetSkills($id:Int!){\n    candidate(id:$id) {\n      skills {\n        id\n        title\n        skilltype {\n          title\n        }\n      }\n    }\n  }`;\nconst GET_ALL_SKILLS = gql`\n  query GetAllSkills{\n    skills {\n      id\n      title\n    }\n  }`;\nconst ADD_SKILL_TO_CANDIDATE = gql`\n  mutation AddSkillToCandidate($id:Int!,$candidateId:Int!){\n    addSkillToCandidate(id:$id,candidateId:$candidateId) {\n      success\n    }\n  }\n`;\nconst REMOVE_SKILL_FROM_CANDIDATE = gql`\n  mutation RemoveSkillFromCandidate($id:Int!,$candidateId:Int!){\n    removeSkillFromCandidate(id:$id,candidateId:$candidateId) {\n      success\n    }\n  }\n`; // Employments SQL Commands\n\nconst GET_ALL_EMPLOYMENTS = gql`\n  query GetAllEmployments {\n    employments {\n      id\n      title\n    }\n  }`; // Companies GQL Commands\n\nconst GET_ALL_COMPANIES = gql`\n  query GetAllCompanies {\n    companies {\n      id\n      title\n    }\n  }`; // Companies GQL Commands\n\nconst GET_ALL_COLLEGES = gql`\n  query GetAllColleges {\n    colleges {\n      id\n      title\n    }\n  }`; // Degrees Commands\n\nconst GET_ALL_DEGREES = gql`\n  query GetAllDegrees {\n    degrees {\n      id\n      title\n    }\n  }`;\nconst months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport default function Profile() {\n  _s();\n\n  const uid = +sessionStorage.getItem(\"uid\");\n  var {\n    id\n  } = useParams();\n  id = parseInt(id);\n  const [formExperienceData, setFormExperienceData] = useState({\n    title: \"\",\n    employmentId: \"\",\n    companyId: \"\",\n    location: \"\",\n    startMonth: \"\",\n    startYear: \"\",\n    endMonth: \"\",\n    endYear: \"\",\n    description: \"\"\n  });\n  const [formEducationData, setFormEducationData] = useState({\n    collegeId: \"\",\n    collegeName: \"\",\n    degreeId: \"\",\n    majorName: \"\",\n    startMonth: \"\",\n    startYear: \"\",\n    endMonth: \"\",\n    endYear: \"\",\n    description: \"\"\n  });\n  const [openEditExperience, setOpenEditExperience] = useState(false);\n  const [openEditEducation, setOpenEditEducation] = useState(false);\n  const [openEditSkill, setOpenEditSkill] = useState(false);\n  const [openId, setOpenId] = useState();\n  const [selectedSkillId, setSelectedSkillId] = useState();\n  const [selectedCompanyId, setSelectedCompanyId] = useState();\n  const [selectedCollegeId, setSelectedCollegeId] = useState();\n  const [action, setAction] = useState(\"Add\"); // Edit Profile Dialog Options\n\n  const [openEditProfile, setOpenEditProfile] = useState(false);\n\n  const handleClickOpenEditProfile = () => {\n    setOpenEditProfile(true);\n  };\n\n  const handleCloseEditProfile = () => {\n    setOpenEditProfile(false);\n  };\n\n  const handleSubmitProfile = e => {\n    e.preventDefault(); // Check if ID is set for updating\n\n    updateCandidate({\n      variables: {\n        id: id,\n        first: e.target.first.value,\n        last: e.target.last.value,\n        headline: e.target.headline.value,\n        location: e.target.location.value,\n        description: e.target.description.value,\n        genderId: parseInt(e.target.genderId.value),\n        pronounId: parseInt(e.target.pronounId.value),\n        ethnicityId: parseInt(e.target.ethnicityId.value)\n      }\n    }); //Close the dialog\n\n    setOpenEditProfile(false); //Refresh the experience list\n\n    refreshProfile();\n  }; // End Edit Profile Dialog Options\n\n\n  const handleClickOpenExperience = exp_list_index => {\n    // ID of Experience on Profile Page is set, Editing...\n    if (exp_list_index != null) {\n      setOpenId(experiencesData.candidate.experiences[exp_list_index].id);\n      setAction(\"Edit\");\n      setFormExperienceData({ ...formExperienceData,\n        title: experiencesData.candidate.experiences[exp_list_index].title,\n        companyId: experiencesData.candidate.experiences[exp_list_index].company.id,\n        location: experiencesData.candidate.experiences[exp_list_index].location,\n        startMonth: experiencesData.candidate.experiences[exp_list_index].startMonth,\n        startYear: experiencesData.candidate.experiences[exp_list_index].startYear,\n        endMonth: experiencesData.candidate.experiences[exp_list_index].endMonth,\n        endYear: experiencesData.candidate.experiences[exp_list_index].endYear,\n        description: experiencesData.candidate.experiences[exp_list_index].description\n      });\n      if (experiencesData.candidate.experiences[exp_list_index].employment != null) setFormExperienceData({ ...formExperienceData,\n        title: experiencesData.candidate.experiences[exp_list_index].title,\n        employmentId: experiencesData.candidate.experiences[exp_list_index].employment.id,\n        companyId: experiencesData.candidate.experiences[exp_list_index].company.id,\n        location: experiencesData.candidate.experiences[exp_list_index].location,\n        startMonth: experiencesData.candidate.experiences[exp_list_index].startMonth,\n        startYear: experiencesData.candidate.experiences[exp_list_index].startYear,\n        endMonth: experiencesData.candidate.experiences[exp_list_index].endMonth,\n        endYear: experiencesData.candidate.experiences[exp_list_index].endYear,\n        description: experiencesData.candidate.experiences[exp_list_index].description\n      }); // No ID set, create new experience\n    } else {\n      setOpenId();\n      setAction(\"Add\");\n      setFormExperienceData({ ...formExperienceData,\n        title: \"\",\n        employmentId: \"\",\n        companyId: \"\",\n        location: \"\",\n        startMonth: \"\",\n        startYear: \"\",\n        endMonth: \"\",\n        endYear: \"\",\n        description: \"\"\n      });\n    }\n\n    setOpenEditExperience(true);\n  };\n\n  const handleClickOpenEducation = edu_list_index => {\n    // ID of education on Profile Page is set, Editing...\n    if (edu_list_index != null) {\n      setOpenId(educationsData.candidate.educations[edu_list_index].id);\n      setAction(\"Edit\");\n      setFormEducationData({ ...formEducationData,\n        collegeName: educationsData.candidate.educations[edu_list_index].collegeName,\n        degreeId: educationsData.candidate.educations[edu_list_index].degreeId,\n        majorName: educationsData.candidate.educations[edu_list_index].majorName,\n        startMonth: educationsData.candidate.educations[edu_list_index].startMonth,\n        startYear: educationsData.candidate.educations[edu_list_index].startYear,\n        endMonth: educationsData.candidate.educations[edu_list_index].endMonth,\n        endYear: educationsData.candidate.educations[edu_list_index].endYear,\n        description: educationsData.candidate.educations[edu_list_index].description\n      });\n      if (educationsData.candidate.educations[edu_list_index].collegeId != null) setFormEducationData({ ...formEducationData,\n        collegeName: educationsData.candidate.educations[edu_list_index].collegeName,\n        collegeId: educationsData.candidate.educations[edu_list_index].collegeId,\n        degreeId: educationsData.candidate.educations[edu_list_index].degreeId,\n        majorName: educationsData.candidate.educations[edu_list_index].majorName,\n        startMonth: educationsData.candidate.educations[edu_list_index].startMonth,\n        startYear: educationsData.candidate.educations[edu_list_index].startYear,\n        endMonth: educationsData.candidate.educations[edu_list_index].endMonth,\n        endYear: educationsData.candidate.educations[edu_list_index].endYear,\n        description: educationsData.candidate.educations[edu_list_index].description\n      }); // No ID set, create new education\n    } else {\n      setOpenId();\n      setAction(\"Add\");\n      setFormEducationData({ ...formEducationData,\n        collegeId: \"\",\n        collegeName: \"\",\n        degreeId: \"\",\n        majorName: \"\",\n        startMonth: \"\",\n        startYear: \"\",\n        endMonth: \"\",\n        endYear: \"\",\n        description: \"\"\n      });\n    }\n\n    setOpenEditEducation(true);\n  };\n\n  const handleClickOpenSkill = () => {\n    setOpenEditSkill(true);\n  };\n\n  const handleCloseEditExperience = () => {\n    setOpenEditExperience(false);\n  };\n\n  const handleCloseEditEducation = () => {\n    setOpenEditEducation(false);\n  };\n\n  const handleCloseEditSkill = () => {\n    setOpenEditSkill(false);\n  };\n\n  const [refreshProfile, {\n    loading: profileLoading,\n    error: profileError,\n    data: profileData\n  }] = useLazyQuery(GET_CANDIDATE, {\n    variables: {\n      id\n    }\n  });\n  const {\n    data: openingsData,\n    loading: openingsLoading\n  } = useQuery(GET_CANDIDATE_OPENINGS, {\n    variables: {\n      id\n    }\n  });\n  const [refreshExperiences, {\n    loading: experiencesLoading,\n    data: experiencesData\n  }] = useLazyQuery(GET_EXPERIENCES, {\n    variables: {\n      id\n    },\n    fetchPolicy: 'network-only'\n  });\n  const [refreshEducations, {\n    loading: educationsLoading,\n    data: educationsData\n  }] = useLazyQuery(GET_EDUCATIONS, {\n    variables: {\n      id\n    },\n    fetchPolicy: 'network-only'\n  });\n  const [refreshSkills, {\n    loading: skillsLoading,\n    data: skillsData\n  }] = useLazyQuery(GET_SKILLS, {\n    variables: {\n      id\n    },\n    fetchPolicy: 'network-only'\n  });\n  const [refreshPosts, {\n    loading: postsLoading,\n    data: postsData\n  }] = useLazyQuery(GET_CANDIDATE_POSTS, {\n    variables: {\n      id\n    },\n    fetchPolicy: 'network-only'\n  });\n  const {\n    loading: allskillsLoading,\n    data: allskillsData\n  } = useQuery(GET_ALL_SKILLS);\n  const {\n    loading: allemploymentsLoading,\n    data: allemploymentsData\n  } = useQuery(GET_ALL_EMPLOYMENTS);\n  const {\n    loading: allgendersLoading,\n    data: allgendersData\n  } = useQuery(GET_ALL_GENDERS);\n  const {\n    loading: allpronounsLoading,\n    data: allpronounsData\n  } = useQuery(GET_ALL_PRONOUNS);\n  const {\n    loading: allethnicitiesLoading,\n    data: allethnicitiesData\n  } = useQuery(GET_ALL_ETHNICITIES);\n  const {\n    loading: allcompaniesLoading,\n    data: allcompaniesData\n  } = useQuery(GET_ALL_COMPANIES);\n  const {\n    loading: allcollegesLoading,\n    data: allcollegesData\n  } = useQuery(GET_ALL_COLLEGES);\n  const {\n    loading: alldegreesLoading,\n    data: alldegreesData\n  } = useQuery(GET_ALL_DEGREES);\n  useEffect(() => {\n    refreshProfile();\n    refreshExperiences();\n    refreshEducations();\n    refreshSkills();\n    refreshPosts();\n  }, []);\n  const [updateCandidate] = useMutation(UPDATE_CANDIDATE);\n  const [createExperience] = useMutation(ADD_EXPERIENCE);\n  const [editExperience] = useMutation(EDIT_EXPERIENCE);\n  const [deleteExperience] = useMutation(DELETE_EXPERIENCE);\n  const [createEducation] = useMutation(ADD_EDUCATION);\n  const [editEducation] = useMutation(EDIT_EDUCATION);\n  const [deleteEducation] = useMutation(DELETE_EDUCATION);\n  const [createPost] = useMutation(ADD_POST);\n  const [deletePost] = useMutation(DELETE_POST);\n  const [addSkillToCandidate] = useMutation(ADD_SKILL_TO_CANDIDATE);\n  const [removeSkillFromCandidate] = useMutation(REMOVE_SKILL_FROM_CANDIDATE);\n\n  const handleSubmitExperience = e => {\n    e.preventDefault(); // Check if ID is set for updating\n\n    if (openId != null) {\n      editExperience({\n        variables: {\n          candidateId: id,\n          id: openId,\n          title: e.target.title.value,\n          employmentId: parseInt(e.target.employmentId.value),\n          companyId: parseInt(e.target.companyId.value),\n          location: e.target.location.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n        }\n      });\n    } // No ID set, add new experience\n    else {\n      createExperience({\n        variables: {\n          candidateId: id,\n          title: e.target.title.value,\n          employmentId: parseInt(e.target.employmentId.value),\n          companyId: parseInt(e.target.companyId.value),\n          location: e.target.location.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n        }\n      });\n    } //Close the dialog\n\n\n    setOpenEditExperience(false); //Refresh the experience list\n\n    refreshExperiences();\n  };\n\n  const handleSubmitPost = e => {\n    e.preventDefault(); // Check if ID is set for updating\n\n    createPost({\n      variables: {\n        candidateId: id,\n        date: 123,\n        status: 1,\n        content: e.target.content.value,\n        openingId: parseInt(e.target.openingId.value)\n      }\n    }); //Refresh the posts list\n\n    refreshPosts();\n  };\n\n  const handleDeleteExperience = () => {\n    deleteExperience({\n      variables: {\n        id: openId\n      }\n    }); //Close the dialog\n\n    setOpenEditExperience(false); //Refresh the experience list\n\n    refreshExperiences();\n  };\n\n  const handleSubmitEducation = e => {\n    e.preventDefault(); // Check if ID is set for updating\n\n    if (openId != null) {\n      editEducation({\n        variables: {\n          candidateId: id,\n          id: openId,\n          collegeName: e.target.collegeName.value,\n          collegeId: selectedCollegeId,\n          degreeId: parseInt(e.target.degreeId.value),\n          majorName: e.target.majorName.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n        }\n      });\n    } // No ID set, add new education\n    else {\n      createEducation({\n        variables: {\n          candidateId: id,\n          collegeName: e.target.collegeName.value,\n          collegeId: selectedCollegeId,\n          degreeId: parseInt(e.target.degreeId.value),\n          majorName: e.target.majorName.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n        }\n      });\n    } //Close the dialog\n\n\n    setOpenEditEducation(false); //Refresh the education list\n\n    refreshEducations();\n  };\n\n  const handleDeleteEducation = () => {\n    deleteEducation({\n      variables: {\n        id: openId\n      }\n    }); //Close the dialog\n\n    setOpenEditEducation(false); //Refresh the education list\n\n    refreshEducations();\n  };\n\n  const handleRemoveSkill = skill_id => {\n    removeSkillFromCandidate({\n      variables: {\n        id: skill_id,\n        candidateId: id\n      }\n    });\n    refreshSkills();\n  };\n\n  const handleSubmitSkill = e => {\n    e.preventDefault(); // Check if ID is set for updating\n\n    addSkillToCandidate({\n      variables: {\n        candidateId: id,\n        id: parseInt(selectedSkillId)\n      }\n    }); //Close the dialog\n    //setOpenEditSkill(false);\n    //Refresh the experience list\n\n    refreshSkills();\n  };\n\n  if (profileLoading) return 'Loading experiences...';\n  if (postsLoading) return 'Loading posts...';\n  if (openingsLoading) return 'Loading...';\n  if (experiencesLoading) return 'Loading experiences...';\n  if (educationsLoading) return 'Loading experiences...';\n  if (skillsLoading) return 'Loading skills...';\n  if (allskillsLoading) return 'Loading all skills...';\n  if (allemploymentsLoading) return 'Loading all employments...';\n  if (profileError) return `Error! ${profileError.message}`;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 6,\n        xs: 12,\n        sx: {\n          mx: 'auto',\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Dialog, {\n            open: openEditProfile,\n            onClose: handleCloseEditProfile,\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              children: \"Edit Profile\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 777,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmitProfile,\n              children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      size: \"small\",\n                      name: \"first\",\n                      label: \"First Name\",\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      defaultValue: profileData.candidate.first\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 782,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 781,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      size: \"small\",\n                      name: \"last\",\n                      label: \"Last Name\",\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      defaultValue: profileData.candidate.last\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 793,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 792,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    md: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      size: \"small\",\n                      name: \"headline\",\n                      label: \"Headline\",\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      defaultValue: profileData.candidate.headline\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 804,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 803,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    md: 6,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      size: \"small\",\n                      name: \"location\",\n                      label: \"Location\",\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      defaultValue: profileData.candidate.location\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 814,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 813,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      select: true,\n                      size: \"small\",\n                      fullWidth: true,\n                      name: \"genderId\",\n                      label: \"Gender Identity\",\n                      defaultValue: profileData.candidate.genderId ? profileData.candidate.genderId : null,\n                      children: allgendersData.genders.map((gender, eid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: gender.id,\n                        children: gender.title\n                      }, eid, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 833,\n                        columnNumber: 25\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 824,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 823,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      select: true,\n                      size: \"small\",\n                      fullWidth: true,\n                      name: \"pronounId\",\n                      label: \"Gender Pronoun\",\n                      defaultValue: profileData.candidate.pronounId ? profileData.candidate.pronounId : null,\n                      children: allpronounsData.pronouns.map((pronoun, eid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: pronoun.id,\n                        children: pronoun.title\n                      }, eid, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 852,\n                        columnNumber: 25\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 843,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 842,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      select: true,\n                      size: \"small\",\n                      fullWidth: true,\n                      name: \"ethnicityId\",\n                      label: \"Ethnicity\",\n                      defaultValue: profileData.candidate.ethnicityId ? profileData.candidate.ethnicityId : null,\n                      children: allethnicitiesData.ethnicities.map((ethnicity, eid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        value: ethnicity.id,\n                        children: ethnicity.title\n                      }, eid, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 871,\n                        columnNumber: 25\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 862,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 861,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      size: \"small\",\n                      name: \"description\",\n                      label: \"Description\",\n                      multiline: true,\n                      rows: 4,\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      defaultValue: profileData.candidate.description\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 881,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 880,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 780,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  onClick: handleCloseEditProfile,\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 895,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 896,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 894,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"200\",\n            image: \"https://source.unsplash.com/random\",\n            alt: \"image alt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardHeader, {\n            avatar: /*#__PURE__*/_jsxDEV(Avatar, { ...stringAvatar(profileData.candidate.first + \" \" + profileData.candidate.last)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 908,\n              columnNumber: 15\n            }, this),\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              sx: {\n                fontSize: '15px'\n              },\n              children: [profileData.candidate.first + \" \" + profileData.candidate.last, profileData.candidate.pronoun.title ? /*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  ml: 0.5,\n                  fontSize: '13px'\n                },\n                variant: \"span\",\n                color: \"text.secondary\",\n                children: [\"(\", profileData.candidate.pronoun.title, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 912,\n                columnNumber: 21\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 19\n            }, this),\n            subheader: profileData.candidate.headline,\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"settings\",\n              onClick: () => handleClickOpenEditProfile(),\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 918,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 917,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 906,\n            columnNumber: 13\n          }, this), profileData.candidate.description || profileData.candidate.location ? /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              pt: 0\n            },\n            children: [profileData.candidate.location ? /*#__PURE__*/_jsxDEV(Typography, {\n              alignItems: \"center\",\n              sx: {\n                display: 'flex'\n              },\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [/*#__PURE__*/_jsxDEV(PublicIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 925,\n                columnNumber: 19\n              }, this), profileData.candidate.location]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 924,\n              columnNumber: 17\n            }, this) : null, profileData.candidate.description ? /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: profileData.candidate.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 17\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitPost,\n            children: [/*#__PURE__*/_jsxDEV(CardContent, {\n              sx: {\n                pb: 0\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                sx: {\n                  fontWeight: 'bold',\n                  fontSize: '15px'\n                },\n                component: \"h2\",\n                children: \"Create post\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                required: true,\n                label: \"What's on your mind?\",\n                multiline: true,\n                rows: 4,\n                variant: \"standard\",\n                fullWidth: true,\n                name: \"content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 943,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              sx: {\n                px: 2,\n                pb: 1\n              },\n              children: [openingsData ? /*#__PURE__*/_jsxDEV(TextField, {\n                select: true,\n                name: \"openingId\",\n                size: \"small\",\n                label: \"Share an Opening\",\n                sx: {\n                  width: '100%',\n                  maxWidth: '250px',\n                  mr: 1\n                },\n                children: openingsData.candidate.openings.map((opening, openingid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                  value: opening.id,\n                  children: opening.title\n                }, openingid, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 963,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 19\n              }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                sx: {\n                  ml: 'auto'\n                },\n                type: \"submit\",\n                children: \"Post\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 953,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 938,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 937,\n          columnNumber: 11\n        }, this), postsData.candidate.posts.map((post, postid) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(PostCard, {\n              id: post.id,\n              name: profileData.candidate.first + \" \" + profileData.candidate.last,\n              date: post.date,\n              content: post.content,\n              openingId: post.opening ? post.opening.id : null,\n              job_title: post.opening ? post.opening.title : null,\n              job_description: post.opening ? post.opening.description : null,\n              job_company: post.opening ? post.opening.company.title : null,\n              job_location: post.opening ? post.opening.location : null,\n              job_employment: post.opening ? post.opening.employment ? post.opening.employment.title : null : null\n            }, postid, false, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 69\n          }, this);\n        }), openingsData ? /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            sx: {\n              py: 1\n            },\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontWeight: 'bold',\n                fontSize: '15px'\n              },\n              component: \"h2\",\n              children: \"Job Postings\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 996,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 995,\n            columnNumber: 15\n          }, this), openingsData.candidate.openings.map((o, openingid) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [openingid > 0 ? /*#__PURE__*/_jsxDEV(Divider, {\n                variant: \"inset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1002,\n                columnNumber: 19\n              }, this) : null, /*#__PURE__*/_jsxDEV(JobListCard, {\n                id: o.id,\n                title: o.title,\n                description: o.description.length > 10 ? o.description.substring(0, 80) + \"...\" : o.description,\n                company: o.company.title,\n                first: profileData.candidate.first,\n                last: profileData.candidate.last,\n                location: o.location,\n                salaryLow: o.salaryLow,\n                salaryHigh: o.salaryHigh,\n                employment: o.employment.title\n              }, openingid, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1004,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1000,\n              columnNumber: 79\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 994,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Dialog, {\n          open: openEditExperience,\n          onClose: handleCloseEditExperience,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: [action, \" Experience\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1023,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitExperience,\n            children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    size: \"small\",\n                    type: \"number\",\n                    name: \"companyId\",\n                    id: \"name\",\n                    label: \"Company\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.companyId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1028,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1027,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    size: \"small\",\n                    name: \"title\",\n                    label: \"Title\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1041,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1040,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  sm: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    select: true,\n                    size: \"small\",\n                    fullWidth: true,\n                    name: \"employmentId\",\n                    label: \"Employment Type\",\n                    defaultValue: formExperienceData.employmentId ? formExperienceData.employmentId : null,\n                    children: allemploymentsData.employments.map((employment, eid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: employment.id,\n                      children: employment.title\n                    }, eid, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1061,\n                      columnNumber: 23\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1052,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1051,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  sm: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    name: \"location\",\n                    id: \"name\",\n                    label: \"Locaton\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.location\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1071,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1070,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1082,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1081,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    size: \"small\",\n                    select: true,\n                    name: \"startMonth\",\n                    id: \"name\",\n                    label: \"Start Month\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.startMonth,\n                    children: months.map((month, mid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: mid + 1,\n                      children: month\n                    }, mid, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1097,\n                      columnNumber: 23\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1085,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1084,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    size: \"small\",\n                    type: \"number\",\n                    name: \"startYear\",\n                    id: \"name\",\n                    label: \"Start Year\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.startYear\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1107,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1106,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    select: true,\n                    size: \"small\",\n                    name: \"endMonth\",\n                    id: \"name\",\n                    label: \"End Month\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.endMonth,\n                    children: months.map((month, mid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: mid + 1,\n                      children: month\n                    }, mid, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1131,\n                      columnNumber: 23\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1120,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1119,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    type: \"number\",\n                    name: \"endYear\",\n                    id: \"name\",\n                    label: \"End Year\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.endYear\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1141,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1140,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1153,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1152,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    name: \"description\",\n                    id: \"standard-multiline-static\",\n                    label: \"Description\",\n                    multiline: true,\n                    rows: 4,\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formExperienceData.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1156,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1155,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1026,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1025,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: [action == 'Edit' ? /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleDeleteExperience,\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1171,\n                columnNumber: 33\n              }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1172,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1024,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            sx: {\n              py: 1\n            },\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"edit\",\n              onClick: () => handleClickOpenExperience(),\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1180,\n              columnNumber: 17\n            }, this),\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontWeight: 'bold',\n                fontSize: '15px'\n              },\n              component: \"h2\",\n              children: \"Experience\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1184,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 13\n          }, this), experiencesData.candidate.experiences.map((exp, exp_list_index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => handleClickOpenExperience(exp_list_index),\n              children: [exp_list_index > 0 ? /*#__PURE__*/_jsxDEV(Divider, {\n                variant: \"inset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1191,\n                columnNumber: 19\n              }, this) : null, /*#__PURE__*/_jsxDEV(ExperienceCard, {\n                title: exp.title,\n                employment: exp.employment ? exp.employment.title : null,\n                company: exp.company.title,\n                location: exp.location,\n                startMonth: exp.startMonth,\n                startYear: exp.startYear,\n                endMonth: exp.endMonth,\n                endYear: exp.endYear,\n                description: exp.description\n              }, exp_list_index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1193,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1189,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: openEditEducation,\n          onClose: handleCloseEditEducation,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: [action, \" Education\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitEducation,\n            children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                spacing: 2,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                    defaultValue: {\n                      label: formEducationData.collegeName,\n                      id: formEducationData.collegeId\n                    },\n                    size: \"small\",\n                    clearOnBlur: false,\n                    name: \"collegeId\",\n                    options: allcollegesData.colleges.map(college => {\n                      return {\n                        label: college.title,\n                        id: college.id\n                      };\n                    }),\n                    fullWidth: true\n                    /*onChange = {(event, value) => setSelectedCollegeId(value.id)}*/\n                    ,\n                    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n                      required: true,\n                      ...params,\n                      name: \"collegeName\",\n                      label: \"College\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1225,\n                      columnNumber: 48\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1215,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1214,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  md: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    fullWidth: true,\n                    name: \"majorName\",\n                    label: \"Major\",\n                    defaultValue: formEducationData.majorName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1229,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1228,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  md: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    select: true,\n                    size: \"small\",\n                    fullWidth: true,\n                    name: \"degreeId\",\n                    label: \"Degree\",\n                    defaultValue: formEducationData.degreeId ? formEducationData.degreeId : null,\n                    children: alldegreesData.degrees.map((degree, did) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: degree.id,\n                      children: degree.title\n                    }, did, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1247,\n                      columnNumber: 23\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1238,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1237,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1257,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1256,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    size: \"small\",\n                    select: true,\n                    name: \"startMonth\",\n                    id: \"name\",\n                    label: \"Start Month\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formEducationData.startMonth,\n                    children: months.map((month, mid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: mid + 1,\n                      children: month\n                    }, mid, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1272,\n                      columnNumber: 23\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1260,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1259,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    required: true,\n                    size: \"small\",\n                    type: \"number\",\n                    name: \"startYear\",\n                    id: \"name\",\n                    label: \"Start Year\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formEducationData.startYear\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1282,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1281,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    select: true,\n                    size: \"small\",\n                    name: \"endMonth\",\n                    id: \"name\",\n                    label: \"End Month\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formEducationData.endMonth,\n                    children: months.map((month, mid) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                      value: mid + 1,\n                      children: month\n                    }, mid, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1306,\n                      columnNumber: 23\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1295,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1294,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 6,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    type: \"number\",\n                    name: \"endYear\",\n                    id: \"name\",\n                    label: \"End Year\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formEducationData.endYear\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1316,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1315,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1328,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1327,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    size: \"small\",\n                    name: \"description\",\n                    id: \"standard-multiline-static\",\n                    label: \"Description\",\n                    multiline: true,\n                    rows: 4,\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    defaultValue: formEducationData.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1331,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1330,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1213,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: [action == 'Edit' ? /*#__PURE__*/_jsxDEV(Button, {\n                onClick: handleDeleteEducation,\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1346,\n                columnNumber: 33\n              }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1347,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1345,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            sx: {\n              py: 1\n            },\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"edit\",\n              onClick: () => handleClickOpenEducation(),\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1356,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1355,\n              columnNumber: 17\n            }, this),\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontWeight: 'bold',\n                fontSize: '15px'\n              },\n              component: \"h2\",\n              children: \"Education\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1359,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1353,\n            columnNumber: 13\n          }, this), educationsData.candidate.educations.map((edu, edu_list_index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => handleClickOpenEducation(edu_list_index),\n              children: [edu_list_index > 0 ? /*#__PURE__*/_jsxDEV(Divider, {\n                variant: \"inset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1366,\n                columnNumber: 19\n              }, this) : null, /*#__PURE__*/_jsxDEV(ExperienceCard, {\n                title: edu.majorName,\n                company: edu.collegeName,\n                employment: edu.degree.title,\n                startMonth: edu.startMonth,\n                startYear: edu.startYear,\n                endMonth: edu.endMonth,\n                endYear: edu.endYear,\n                description: edu.description\n              }, edu_list_index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1368,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1364,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: openEditSkill,\n          onClose: handleCloseEditSkill,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: \"Add Skill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmitSkill,\n            children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n              children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n                name: \"skill_id\",\n                options: allskillsData.skills.map(skill => {\n                  return {\n                    label: skill.title,\n                    id: skill.id\n                  };\n                }),\n                sx: {\n                  width: 300\n                },\n                onChange: (event, value) => setSelectedSkillId(value.id),\n                renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                  label: \"Skill\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1394,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1387,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1386,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1398,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1397,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1385,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            sx: {\n              pb: 0,\n              pt: 1\n            },\n            action: /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"edit\",\n              onClick: () => handleClickOpenSkill(),\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1407,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1406,\n              columnNumber: 17\n            }, this),\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                fontWeight: 'bold',\n                fontSize: '15px'\n              },\n              component: \"h2\",\n              children: \"Skills\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1410,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 1,\n              children: skillsData ? skillsData.candidate.skills.map((skill, skill_list_index) => {\n                return /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: skill.title,\n                    onDelete: () => handleRemoveSkill(skill.id)\n                  }, skill_list_index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1418,\n                    columnNumber: 39\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1418,\n                  columnNumber: 28\n                }, this);\n              }) : \"No skills selected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1415,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1414,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1403,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 772,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Profile, \"N4kcl9Tl2GkGH69ih9bz9GknLq4=\", false, function () {\n  return [useParams, useLazyQuery, useQuery, useLazyQuery, useLazyQuery, useLazyQuery, useLazyQuery, useQuery, useQuery, useQuery, useQuery, useQuery, useQuery, useQuery, useQuery, useMutation, useMutation, useMutation, useMutation, useMutation, useMutation, useMutation, useMutation, useMutation, useMutation, useMutation];\n});\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Profile/Profile.js"],"names":["React","Fragment","useState","useEffect","useHistory","useLocation","useParams","axios","gql","useQuery","useLazyQuery","useMutation","Container","Grid","Paper","Typography","Button","TextField","MenuItem","Autocomplete","Link","Alert","Stack","Avatar","IconButton","AddIcon","EditIcon","PublicIcon","List","ListItem","ListSubheader","Divider","ListItemText","ListItemAvatar","Chip","Card","CardMedia","CardHeader","CardContent","CardActionArea","CardActions","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Add","DeleteIcon","ExperienceCard","JobListCard","PostCard","stringToColor","string","hash","i","length","charCodeAt","color","value","toString","substr","stringAvatar","name","sx","bgcolor","children","split","GET_CANDIDATE","UPDATE_CANDIDATE","GET_ALL_GENDERS","GET_ALL_ETHNICITIES","GET_ALL_PRONOUNS","GET_EXPERIENCES","ADD_EXPERIENCE","EDIT_EXPERIENCE","DELETE_EXPERIENCE","GET_EDUCATIONS","ADD_EDUCATION","EDIT_EDUCATION","DELETE_EDUCATION","GET_CANDIDATE_OPENINGS","GET_CANDIDATE_POSTS","ADD_POST","DELETE_POST","GET_SKILLS","GET_ALL_SKILLS","ADD_SKILL_TO_CANDIDATE","REMOVE_SKILL_FROM_CANDIDATE","GET_ALL_EMPLOYMENTS","GET_ALL_COMPANIES","GET_ALL_COLLEGES","GET_ALL_DEGREES","months","Profile","uid","sessionStorage","getItem","id","parseInt","formExperienceData","setFormExperienceData","title","employmentId","companyId","location","startMonth","startYear","endMonth","endYear","description","formEducationData","setFormEducationData","collegeId","collegeName","degreeId","majorName","openEditExperience","setOpenEditExperience","openEditEducation","setOpenEditEducation","openEditSkill","setOpenEditSkill","openId","setOpenId","selectedSkillId","setSelectedSkillId","selectedCompanyId","setSelectedCompanyId","selectedCollegeId","setSelectedCollegeId","action","setAction","openEditProfile","setOpenEditProfile","handleClickOpenEditProfile","handleCloseEditProfile","handleSubmitProfile","e","preventDefault","updateCandidate","variables","first","target","last","headline","genderId","pronounId","ethnicityId","refreshProfile","handleClickOpenExperience","exp_list_index","experiencesData","candidate","experiences","company","employment","handleClickOpenEducation","edu_list_index","educationsData","educations","handleClickOpenSkill","handleCloseEditExperience","handleCloseEditEducation","handleCloseEditSkill","loading","profileLoading","error","profileError","data","profileData","openingsData","openingsLoading","refreshExperiences","experiencesLoading","fetchPolicy","refreshEducations","educationsLoading","refreshSkills","skillsLoading","skillsData","refreshPosts","postsLoading","postsData","allskillsLoading","allskillsData","allemploymentsLoading","allemploymentsData","allgendersLoading","allgendersData","allpronounsLoading","allpronounsData","allethnicitiesLoading","allethnicitiesData","allcompaniesLoading","allcompaniesData","allcollegesLoading","allcollegesData","alldegreesLoading","alldegreesData","createExperience","editExperience","deleteExperience","createEducation","editEducation","deleteEducation","createPost","deletePost","addSkillToCandidate","removeSkillFromCandidate","handleSubmitExperience","candidateId","handleSubmitPost","date","status","content","openingId","handleDeleteExperience","handleSubmitEducation","handleDeleteEducation","handleRemoveSkill","skill_id","handleSubmitSkill","message","mx","mt","mb","genders","map","gender","eid","pronouns","pronoun","ethnicities","ethnicity","fontSize","ml","pt","display","pb","fontWeight","px","width","maxWidth","mr","openings","opening","openingid","posts","post","postid","py","o","substring","salaryLow","salaryHigh","employments","month","mid","exp","label","colleges","college","params","degrees","degree","did","edu","skills","skill","event","skill_list_index"],"mappings":"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NA;AAOA,MAAM+D,gBAAgB,GAAG/D,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,IANA,C,CAOA;;AACA,MAAMgE,eAAe,GAAGhE,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAtBA;AAuBA,MAAMiE,cAAc,GAAGjE,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WA1BA;AA4BA,MAAMkE,eAAe,GAAGlE,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA1BA;AA4BA,MAAMmE,iBAAiB,GAAGnE,GAAI;AAC9B;AACA;AACA;AACA;AACA,MALA,C,CAMA;;AACA,MAAMoE,cAAc,GAAGpE,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IApBA;AAsBA,MAAMqE,aAAa,GAAGrE,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WA1BA;AA4BA,MAAMsE,cAAc,GAAGtE,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eA5BA;AA6BA,MAAMuE,gBAAgB,GAAGvE,GAAI;AAC7B;AACA;AACA;AACA;AACA,MALA,C,CAMA;;AACA,MAAMwE,sBAAsB,GAAGxE,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IApBA,C,CAsBA;;AACA,MAAMyE,mBAAmB,GAAGzE,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAvBA;AAyBA,MAAM0E,QAAQ,GAAG1E,GAAI;AACrB;AACA;AACA;AACA;AACA,IALA;AAOA,MAAM2E,WAAW,GAAG3E,GAAI;AACxB;AACA;AACA;AACA;AACA,IALA,C,CAOA;;AACA,MAAM4E,UAAU,GAAG5E,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAXA;AAaA,MAAM6E,cAAc,GAAG7E,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,IANA;AAQA,MAAM8E,sBAAsB,GAAG9E,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAM+E,2BAA2B,GAAG/E,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA,CANA,C,CASA;;AACA,MAAMgF,mBAAmB,GAAGhF,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,IANA,C,CAQA;;AACA,MAAMiF,iBAAiB,GAAGjF,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,IANA,C,CAQA;;AACA,MAAMkF,gBAAgB,GAAGlF,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,IANA,C,CAOA;;AACA,MAAMmF,eAAe,GAAGnF,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,IANA;AAQA,MAAMoF,MAAM,GAAG,CACb,SADa,EAEb,UAFa,EAGb,OAHa,EAIb,OAJa,EAKb,KALa,EAMb,MANa,EAOb,MAPa,EAQb,QARa,EASb,WATa,EAUb,SAVa,EAWb,UAXa,EAYb,UAZa,CAAf;AAeA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAMC,GAAG,GAAG,CA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","sourcesContent":["import {React, Fragment, useState, useEffect} from \"react\";\nimport {useHistory, useLocation, useParams} from \"react-router-dom\";\nimport axios from \"axios\";\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\n\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport Autocomplete from '@mui/material/Autocomplete';\n\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport Avatar from '@mui/material/Avatar';\n\nimport IconButton from '@mui/material/IconButton';\nimport AddIcon from '@mui/icons-material/Add';\nimport EditIcon from '@mui/icons-material/Edit';\nimport PublicIcon from '@mui/icons-material/Public';\n\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Divider from '@mui/material/Divider';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\n\nimport Chip from '@mui/material/Chip';\n\nimport { Card, CardMedia, CardHeader, CardContent, CardActionArea, CardActions } from '@mui/material';\n\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from '@mui/material';\nimport Add from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\n\nimport ExperienceCard from \"../Card/ExperienceCard\";\nimport JobListCard from \"../Card/JobListCard\";\nimport PostCard from \"../Card/PostCard\";\n\nfunction stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n\nfunction stringAvatar(name) {\n  return {\n    sx: {\n      bgcolor: stringToColor(name),\n    },\n    children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,\n  };\n}\n// Candidate GQL Commands\nconst GET_CANDIDATE = gql`\n  query GetCandidate($id:Int!){\n    candidate(id:$id) {\n      first\n      last\n      headline\n      location\n      description\n      genderId\n      gender {\n        title\n      }\n      pronounId\n      pronoun {\n        title\n      }\n      ethnicityId\n      ethnicity {\n        title\n      }\n    }\n  }`;\nconst UPDATE_CANDIDATE = gql`\nmutation UpdateCandidate($id:Int!,$first:String!,$last:String!,$headline:String,$location:String,$description:String, $genderId: Int, $pronounId: Int, $ethnicityId: Int){\n  updateCandidate(id:$id,first:$first,last:$last,headline:$headline,location:$location,description:$description,genderId: $genderId, pronounId: $pronounId, ethnicityId: $ethnicityId) {\n    id\n  }\n}`;\nconst GET_ALL_GENDERS = gql`\n  query GetAllGenders{\n    genders{\n      id\n      title\n    }\n  }`;\nconst GET_ALL_ETHNICITIES = gql`\n  query GetAllEthnicities{\n    ethnicities {\n      id\n      title\n    }\n  }`;\nconst GET_ALL_PRONOUNS = gql`\n  query GetAllPronouns{\n    pronouns {\n      id\n      title\n    }\n  }`;\n// Experience GQL Commands\nconst GET_EXPERIENCES = gql`\n  query GetExperiences($id:Int!){\n        candidate(id:$id) {\n          experiences {\n            id\n            title\n            startMonth\n            startYear\n            endMonth\n            endYear\n            description\n            location\n            employment {\n              id\n              title\n            }\n            company {\n              id\n              title\n            }\n          }\n        }\n      }`;\nconst ADD_EXPERIENCE = gql`\n    mutation CreateExperience(\n        $title:String!,\n        $candidateId:Int!,\n        $companyId:Int!,\n        $startMonth:Int!,\n        $startYear:Int!,\n        $endMonth:Int,\n        $endYear:Int,\n        $employmentId:Int,\n        $location:String,\n        $description:String\n      ) {\n        createExperience(\n          title:$title,\n          candidateId:$candidateId,\n          companyId:$companyId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          employmentId:$employmentId,\n          location:$location,\n          description:$description\n        ){\n          id\n        }}`;\n\nconst EDIT_EXPERIENCE = gql`\n    mutation UpdateExperience(\n        $id:Int,\n        $title:String!,\n        $candidateId:Int!,\n        $companyId:Int!,\n        $startMonth:Int!,\n        $startYear:Int!,\n        $endMonth:Int,\n        $endYear:Int,\n        $employmentId:Int,\n        $location:String,\n        $description:String) {\n        updateExperience(\n          id:$id,\n          title:$title,\n          candidateId:$candidateId,\n          companyId:$companyId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          employmentId:$employmentId,\n          location:$location,\n          description:$description) {\n              id\n            }}`;\n\nconst DELETE_EXPERIENCE = gql`\n    mutation DeleteExperience($id:Int!) {\n      deleteExperience(id:$id) {\n        success\n      }\n    }`;\n// Education GQL Commands\nconst GET_EDUCATIONS = gql`\n  query GetEducations($id:Int!){\n    candidate(id:$id) {\n      educations {\n        id\n        candidateId\n        collegeName\n        majorName\n        collegeId\n        degreeId\n        degree {\n          title\n        }\n        startMonth\n        startYear\n        endMonth\n        endYear\n        description\n      }\n    }\n  }`;\n\nconst ADD_EDUCATION = gql`\n    mutation CreateEducation(\n      $candidateId:Int!,\n      $collegeName:String!,\n      $collegeId:Int,\n      $degreeId:Int,\n      $majorName:String,\n      $startMonth:Int,\n      $startYear:Int,\n      $endMonth:Int,\n      $endYear:Int,\n      $description:String\n      ) {\n        createEducation(\n          candidateId:$candidateId,\n          collegeName:$collegeName,\n          collegeId:$collegeId,\n          majorName:$majorName\n          degreeId:$degreeId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          description:$description\n        ){\n          id\n        }}`;\n\nconst EDIT_EDUCATION = gql`\n    mutation UpdateEducation(\n        $id:Int,\n        $candidateId:Int!,\n        $collegeName:String!,\n        $collegeId:Int,\n        $majorName:String,\n        $degreeId:Int,\n        $startMonth:Int,\n        $startYear:Int,\n        $endMonth:Int,\n        $endYear:Int,\n        $description:String\n        ) {\n        updateEducation(\n          id:$id,\n          candidateId:$candidateId,\n          collegeName:$collegeName,\n          collegeId:$collegeId,\n          majorName:$majorName\n          degreeId:$degreeId,\n          startMonth:$startMonth,\n          startYear:$startYear,\n          endMonth:$endMonth,\n          endYear:$endYear,\n          description:$description\n          ) {\n              id\n            }}`;\nconst DELETE_EDUCATION = gql`\n    mutation DeleteEducation($id:Int!) {\n      deleteEducation(id:$id) {\n        success\n      }\n    }`;\n// Job Post GQL Commands\nconst GET_CANDIDATE_OPENINGS = gql`\n  query GetCandidateOpenings($id:Int!){\n    candidate(id:$id) {\n      openings {\n        id\n        title\n        description\n        location\n        salaryLow\n        salaryHigh\n        startMonth\n        startYear\n        company {\n          title\n        }\n        employment {\n          title\n        }\n      }\n    }\n  }`;\n\n// Post GQL Commands\nconst GET_CANDIDATE_POSTS = gql`\n  query GetCandidatePosts($id:Int!){\n    candidate(id:$id) {\n      posts {\n        id\n        date\n        status\n        content\n        opening {\n          id\n          title\n          description\n          companyId\n          location\n          employment {\n            title\n          }\n          company{\n            title\n          }\n        }\n      }\n    }\n  }`;\n\nconst ADD_POST = gql`\n  mutation AddPost($candidateId:Int!,$date:Int!,$status:Int!,$content:String!,$openingId:Int) {\n    createPost(candidateId:$candidateId,date:$date,status:$status,content:$content,openingId:$openingId) {\n      id\n    }\n  }`;\n\nconst DELETE_POST = gql`\n  mutation DeletePost($id:Int!) {\n    deletePost(id:$id) {\n      success\n    }\n  }`;\n\n// Skill GQL Commands\nconst GET_SKILLS = gql`\n  query GetSkills($id:Int!){\n    candidate(id:$id) {\n      skills {\n        id\n        title\n        skilltype {\n          title\n        }\n      }\n    }\n  }`;\n\nconst GET_ALL_SKILLS = gql`\n  query GetAllSkills{\n    skills {\n      id\n      title\n    }\n  }`;\n\nconst ADD_SKILL_TO_CANDIDATE = gql`\n  mutation AddSkillToCandidate($id:Int!,$candidateId:Int!){\n    addSkillToCandidate(id:$id,candidateId:$candidateId) {\n      success\n    }\n  }\n`;\n\nconst REMOVE_SKILL_FROM_CANDIDATE = gql`\n  mutation RemoveSkillFromCandidate($id:Int!,$candidateId:Int!){\n    removeSkillFromCandidate(id:$id,candidateId:$candidateId) {\n      success\n    }\n  }\n`;\n\n\n// Employments SQL Commands\nconst GET_ALL_EMPLOYMENTS = gql`\n  query GetAllEmployments {\n    employments {\n      id\n      title\n    }\n  }`;\n\n// Companies GQL Commands\nconst GET_ALL_COMPANIES = gql`\n  query GetAllCompanies {\n    companies {\n      id\n      title\n    }\n  }`;\n\n// Companies GQL Commands\nconst GET_ALL_COLLEGES = gql`\n  query GetAllColleges {\n    colleges {\n      id\n      title\n    }\n  }`;\n// Degrees Commands\nconst GET_ALL_DEGREES = gql`\n  query GetAllDegrees {\n    degrees {\n      id\n      title\n    }\n  }`;\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n\nexport default function Profile() {\n  const uid = +sessionStorage.getItem(\"uid\");\n  var { id } = useParams();\n  id = parseInt(id);\n\n  const [formExperienceData, setFormExperienceData] = useState({title:\"\", employmentId:\"\", companyId:\"\",location:\"\",startMonth:\"\",startYear:\"\",endMonth:\"\",endYear:\"\",description:\"\"});\n\n  const [formEducationData, setFormEducationData] = useState({collegeId:\"\", collegeName:\"\", degreeId:\"\",majorName:\"\",startMonth:\"\",startYear:\"\",endMonth:\"\",endYear:\"\",description:\"\"});\n\n\n  const [openEditExperience, setOpenEditExperience] = useState(false);\n  const [openEditEducation, setOpenEditEducation] = useState(false);\n  const [openEditSkill, setOpenEditSkill] = useState(false);\n  const [openId, setOpenId] = useState();\n  const [selectedSkillId, setSelectedSkillId] = useState();\n  const [selectedCompanyId, setSelectedCompanyId] = useState();\n  const [selectedCollegeId, setSelectedCollegeId] = useState();\n  const [action, setAction] = useState(\"Add\");\n\n  // Edit Profile Dialog Options\n  const [openEditProfile, setOpenEditProfile] = useState(false);\n  const handleClickOpenEditProfile = () => {\n    setOpenEditProfile(true);\n  };\n  const handleCloseEditProfile = () => {\n    setOpenEditProfile(false);\n  };\n  const handleSubmitProfile = (e) =>{\n    e.preventDefault();\n    // Check if ID is set for updating\n\n    updateCandidate({\n      variables: {\n        id: id,\n        first: e.target.first.value,\n        last: e.target.last.value,\n        headline: e.target.headline.value,\n        location: e.target.location.value,\n        description: e.target.description.value,\n        genderId: parseInt(e.target.genderId.value),\n        pronounId: parseInt(e.target.pronounId.value),\n        ethnicityId: parseInt(e.target.ethnicityId.value)\n     }\n   });\n    //Close the dialog\n    setOpenEditProfile(false);\n    //Refresh the experience list\n    refreshProfile();\n  }\n  // End Edit Profile Dialog Options\n\n  const handleClickOpenExperience = (exp_list_index) => {\n\n    // ID of Experience on Profile Page is set, Editing...\n    if(exp_list_index != null){\n      setOpenId(experiencesData.candidate.experiences[exp_list_index].id);\n      setAction(\"Edit\");\n\n      setFormExperienceData({...formExperienceData,\n        title:experiencesData.candidate.experiences[exp_list_index].title,\n        companyId:experiencesData.candidate.experiences[exp_list_index].company.id,\n        location:experiencesData.candidate.experiences[exp_list_index].location,\n        startMonth:experiencesData.candidate.experiences[exp_list_index].startMonth,\n        startYear:experiencesData.candidate.experiences[exp_list_index].startYear,\n        endMonth:experiencesData.candidate.experiences[exp_list_index].endMonth,\n        endYear:experiencesData.candidate.experiences[exp_list_index].endYear,\n        description:experiencesData.candidate.experiences[exp_list_index].description}\n      );\n      if(experiencesData.candidate.experiences[exp_list_index].employment != null)\n        setFormExperienceData({...formExperienceData,\n          title:experiencesData.candidate.experiences[exp_list_index].title,\n          employmentId:experiencesData.candidate.experiences[exp_list_index].employment.id,\n          companyId:experiencesData.candidate.experiences[exp_list_index].company.id,\n          location:experiencesData.candidate.experiences[exp_list_index].location,\n          startMonth:experiencesData.candidate.experiences[exp_list_index].startMonth,\n          startYear:experiencesData.candidate.experiences[exp_list_index].startYear,\n          endMonth:experiencesData.candidate.experiences[exp_list_index].endMonth,\n          endYear:experiencesData.candidate.experiences[exp_list_index].endYear,\n          description:experiencesData.candidate.experiences[exp_list_index].description\n        });\n    // No ID set, create new experience\n    }\n    else {\n      setOpenId();\n      setAction(\"Add\");\n      setFormExperienceData({...formExperienceData, title:\"\", employmentId:\"\", companyId:\"\",location:\"\",startMonth:\"\",startYear:\"\",endMonth:\"\",endYear:\"\",description:\"\"});\n    }\n    setOpenEditExperience(true);\n  };\n  const handleClickOpenEducation = (edu_list_index) => {\n\n    // ID of education on Profile Page is set, Editing...\n    if(edu_list_index != null){\n      setOpenId(educationsData.candidate.educations[edu_list_index].id);\n      setAction(\"Edit\");\n\n      setFormEducationData({...formEducationData,\n        collegeName:educationsData.candidate.educations[edu_list_index].collegeName,\n        degreeId:educationsData.candidate.educations[edu_list_index].degreeId,\n        majorName:educationsData.candidate.educations[edu_list_index].majorName,\n        startMonth:educationsData.candidate.educations[edu_list_index].startMonth,\n        startYear:educationsData.candidate.educations[edu_list_index].startYear,\n        endMonth:educationsData.candidate.educations[edu_list_index].endMonth,\n        endYear:educationsData.candidate.educations[edu_list_index].endYear,\n        description:educationsData.candidate.educations[edu_list_index].description}\n      );\n      if(educationsData.candidate.educations[edu_list_index].collegeId != null)\n        setFormEducationData({...formEducationData,\n          collegeName:educationsData.candidate.educations[edu_list_index].collegeName,\n          collegeId:educationsData.candidate.educations[edu_list_index].collegeId,\n          degreeId:educationsData.candidate.educations[edu_list_index].degreeId,\n          majorName:educationsData.candidate.educations[edu_list_index].majorName,\n          startMonth:educationsData.candidate.educations[edu_list_index].startMonth,\n          startYear:educationsData.candidate.educations[edu_list_index].startYear,\n          endMonth:educationsData.candidate.educations[edu_list_index].endMonth,\n          endYear:educationsData.candidate.educations[edu_list_index].endYear,\n          description:educationsData.candidate.educations[edu_list_index].description\n        });\n    // No ID set, create new education\n    }\n    else {\n      setOpenId();\n      setAction(\"Add\");\n      setFormEducationData({...formEducationData, collegeId:\"\", collegeName:\"\", degreeId:\"\",majorName:\"\",startMonth:\"\",startYear:\"\",endMonth:\"\",endYear:\"\",description:\"\"});\n    }\n    setOpenEditEducation(true);\n  };\n  const handleClickOpenSkill = () => {\n    setOpenEditSkill(true);\n  };\n  const handleCloseEditExperience = () => {\n    setOpenEditExperience(false);\n  };\n  const handleCloseEditEducation = () => {\n    setOpenEditEducation(false);\n  };\n  const handleCloseEditSkill = () => {\n    setOpenEditSkill(false);\n  };\n\n  const [refreshProfile, { loading:profileLoading, error:profileError, data:profileData }] = useLazyQuery(GET_CANDIDATE, {variables:{id}});\n  const { data:openingsData, loading:openingsLoading } = useQuery(GET_CANDIDATE_OPENINGS, {variables:{id}});\n  const [refreshExperiences, { loading:experiencesLoading, data:experiencesData }] = useLazyQuery(GET_EXPERIENCES, {variables:{id},fetchPolicy: 'network-only'});\n  const [refreshEducations, { loading:educationsLoading, data:educationsData }] = useLazyQuery(GET_EDUCATIONS, {variables:{id},fetchPolicy: 'network-only'});\n  const [refreshSkills, { loading:skillsLoading, data:skillsData }] = useLazyQuery(GET_SKILLS, {variables:{id},fetchPolicy: 'network-only'});\n  const [refreshPosts, { loading:postsLoading, data:postsData }] = useLazyQuery(GET_CANDIDATE_POSTS, {variables:{id},fetchPolicy: 'network-only'});\n\n  const { loading:allskillsLoading, data:allskillsData } = useQuery(GET_ALL_SKILLS);\n  const { loading:allemploymentsLoading, data:allemploymentsData } = useQuery(GET_ALL_EMPLOYMENTS);\n\n  const { loading:allgendersLoading, data:allgendersData } = useQuery(GET_ALL_GENDERS);\n  const { loading:allpronounsLoading, data:allpronounsData } = useQuery(GET_ALL_PRONOUNS);\n  const { loading:allethnicitiesLoading, data:allethnicitiesData } = useQuery(GET_ALL_ETHNICITIES);\n  const { loading:allcompaniesLoading, data:allcompaniesData } = useQuery(GET_ALL_COMPANIES);\n  const { loading:allcollegesLoading, data:allcollegesData } = useQuery(GET_ALL_COLLEGES);\n  const { loading:alldegreesLoading, data:alldegreesData } = useQuery(GET_ALL_DEGREES);\n\n  useEffect(() => {\n    refreshProfile();\n    refreshExperiences();\n    refreshEducations();\n    refreshSkills();\n    refreshPosts();\n  }, []);\n\n  const [updateCandidate] = useMutation(UPDATE_CANDIDATE);\n  const [createExperience] = useMutation(ADD_EXPERIENCE);\n  const [editExperience] = useMutation(EDIT_EXPERIENCE)\n  const [deleteExperience] = useMutation(DELETE_EXPERIENCE)\n\n  const [createEducation] = useMutation(ADD_EDUCATION);\n  const [editEducation] = useMutation(EDIT_EDUCATION);\n  const [deleteEducation] = useMutation(DELETE_EDUCATION);\n\n  const [createPost] = useMutation(ADD_POST);\n  const [deletePost] = useMutation(DELETE_POST);\n\n  const [addSkillToCandidate] = useMutation(ADD_SKILL_TO_CANDIDATE)\n  const [removeSkillFromCandidate] = useMutation(REMOVE_SKILL_FROM_CANDIDATE);\n\n  const handleSubmitExperience = (e) =>{\n    e.preventDefault();\n    // Check if ID is set for updating\n    if(openId != null) {\n      editExperience({\n        variables: {\n          candidateId: id,\n          id: openId,\n          title: e.target.title.value,\n          employmentId: parseInt(e.target.employmentId.value),\n          companyId: parseInt(e.target.companyId.value),\n          location: e.target.location.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n       }\n     });\n    }\n    // No ID set, add new experience\n    else {\n      createExperience({\n        variables: {\n          candidateId: id,\n          title: e.target.title.value,\n          employmentId: parseInt(e.target.employmentId.value),\n          companyId: parseInt(e.target.companyId.value),\n          location: e.target.location.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n       }\n     });\n    }\n    //Close the dialog\n    setOpenEditExperience(false);\n    //Refresh the experience list\n    refreshExperiences();\n  }\n  const handleSubmitPost = (e) =>{\n    e.preventDefault();\n    // Check if ID is set for updating\n\n    createPost({\n      variables: {\n        candidateId: id,\n        date: 123,\n        status: 1,\n        content: e.target.content.value,\n        openingId: parseInt(e.target.openingId.value),\n     }\n   });\n    //Refresh the posts list\n    refreshPosts();\n  };\n  const handleDeleteExperience = () =>{\n    deleteExperience({variables:{id:openId}});\n    //Close the dialog\n    setOpenEditExperience(false);\n    //Refresh the experience list\n    refreshExperiences();\n  };\n  const handleSubmitEducation = (e) =>{\n    e.preventDefault();\n    // Check if ID is set for updating\n    if(openId != null) {\n      editEducation({\n        variables: {\n          candidateId: id,\n          id: openId,\n          collegeName: e.target.collegeName.value,\n          collegeId: selectedCollegeId,\n          degreeId: parseInt(e.target.degreeId.value),\n          majorName:  e.target.majorName.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n       }\n     });\n    }\n    // No ID set, add new education\n    else {\n      createEducation({\n        variables: {\n          candidateId: id,\n          collegeName: e.target.collegeName.value,\n          collegeId: selectedCollegeId,\n          degreeId: parseInt(e.target.degreeId.value),\n          majorName:  e.target.majorName.value,\n          startMonth: parseInt(e.target.startMonth.value),\n          startYear: parseInt(e.target.startYear.value),\n          endMonth: parseInt(e.target.endMonth.value),\n          endYear: parseInt(e.target.endYear.value),\n          description: e.target.description.value\n       }\n     });\n    }\n    //Close the dialog\n    setOpenEditEducation(false);\n    //Refresh the education list\n    refreshEducations();\n  }\n  const handleDeleteEducation = () =>{\n    deleteEducation({variables:{id:openId}});\n    //Close the dialog\n    setOpenEditEducation(false);\n    //Refresh the education list\n    refreshEducations();\n  };\n  const handleRemoveSkill = (skill_id) => {\n    removeSkillFromCandidate({variables:{id:skill_id,candidateId:id}})\n    refreshSkills();\n  };\n  const handleSubmitSkill = (e) =>{\n    e.preventDefault();\n    // Check if ID is set for updating\n    addSkillToCandidate({\n      variables: {\n        candidateId: id,\n        id: parseInt(selectedSkillId),\n     }\n    });\n    //Close the dialog\n    //setOpenEditSkill(false);\n    //Refresh the experience list\n    refreshSkills();\n  };\n\n  if (profileLoading) return 'Loading experiences...';\n  if (postsLoading) return 'Loading posts...';\n  if (openingsLoading) return 'Loading...';\n  if (experiencesLoading) return 'Loading experiences...';\n  if (educationsLoading) return 'Loading experiences...';\n  if (skillsLoading) return 'Loading skills...';\n  if (allskillsLoading) return 'Loading all skills...';\n  if (allemploymentsLoading) return 'Loading all employments...';\n\n  if (profileError) return `Error! ${profileError.message}`;\n\n  return(\n    <Container component=\"main\">\n      <Grid container>\n        <Grid item md={6} xs={12} sx={{ mx: 'auto', mt:2}}>\n          <Card sx={{ mb: 2 }}>\n            <Dialog open={openEditProfile} onClose={handleCloseEditProfile}>\n              <DialogTitle>Edit Profile</DialogTitle>\n              <form onSubmit={handleSubmitProfile}>\n                <DialogContent>\n                  <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                      <TextField\n                        required\n                        size=\"small\"\n                        name=\"first\"\n                        label=\"First Name\"\n                        fullWidth\n                        variant=\"outlined\"\n                        defaultValue={profileData.candidate.first}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <TextField\n                        required\n                        size=\"small\"\n                        name=\"last\"\n                        label=\"Last Name\"\n                        fullWidth\n                        variant=\"outlined\"\n                        defaultValue={profileData.candidate.last}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        size=\"small\"\n                        name=\"headline\"\n                        label=\"Headline\"\n                        fullWidth\n                        variant=\"outlined\"\n                        defaultValue={profileData.candidate.headline}\n                      />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                      <TextField\n                        size=\"small\"\n                        name=\"location\"\n                        label=\"Location\"\n                        fullWidth\n                        variant=\"outlined\"\n                        defaultValue={profileData.candidate.location}\n                      />\n                    </Grid>\n                    <Grid item xs={12} sm={6} md={4}>\n                      <TextField\n                        select\n                        size=\"small\"\n                        fullWidth\n                        name=\"genderId\"\n                        label=\"Gender Identity\"\n                        defaultValue={profileData.candidate.genderId?profileData.candidate.genderId:null}\n                      >\n                        {allgendersData.genders.map((gender,eid) => (\n                        <MenuItem\n                          key={eid}\n                          value={gender.id}\n                        >\n                          {gender.title}\n                        </MenuItem>\n                         ))}\n                      </TextField>\n                    </Grid>\n                    <Grid item xs={12} sm={6} md={4}>\n                      <TextField\n                        select\n                        size=\"small\"\n                        fullWidth\n                        name=\"pronounId\"\n                        label=\"Gender Pronoun\"\n                        defaultValue={profileData.candidate.pronounId?profileData.candidate.pronounId:null}\n                      >\n                        {allpronounsData.pronouns.map((pronoun,eid) => (\n                        <MenuItem\n                          key={eid}\n                          value={pronoun.id}\n                        >\n                          {pronoun.title}\n                        </MenuItem>\n                         ))}\n                      </TextField>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                      <TextField\n                        select\n                        size=\"small\"\n                        fullWidth\n                        name=\"ethnicityId\"\n                        label=\"Ethnicity\"\n                        defaultValue={profileData.candidate.ethnicityId?profileData.candidate.ethnicityId:null}\n                      >\n                        {allethnicitiesData.ethnicities.map((ethnicity,eid) => (\n                        <MenuItem\n                          key={eid}\n                          value={ethnicity.id}\n                        >\n                          {ethnicity.title}\n                        </MenuItem>\n                         ))}\n                      </TextField>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <TextField\n                        size=\"small\"\n                        name=\"description\"\n                        label=\"Description\"\n                        multiline\n                        rows={4}\n                        fullWidth\n                        variant=\"outlined\"\n                        defaultValue={profileData.candidate.description}\n                      />\n                    </Grid>\n                  </Grid>\n                </DialogContent>\n                <DialogActions>\n                  <Button onClick={handleCloseEditProfile}>Cancel</Button>\n                  <Button type=\"submit\">Save</Button>\n                </DialogActions>\n              </form>\n            </Dialog>\n            <CardMedia\n              component=\"img\"\n              height=\"200\"\n              image=\"https://source.unsplash.com/random\"\n              alt=\"image alt\"\n            />\n            <CardHeader\n            avatar={\n              <Avatar {...stringAvatar(profileData.candidate.first+\" \"+profileData.candidate.last)} />\n            }\n            title=<Typography component=\"h1\" sx={{fontSize:'15px'}}>{profileData.candidate.first+\" \"+profileData.candidate.last}\n                    {profileData.candidate.pronoun.title?\n                    <Typography sx={{ml:0.5,fontSize:'13px'}} variant=\"span\" color=\"text.secondary\">\n                      ({profileData.candidate.pronoun.title})\n                    </Typography>:null}\n                  </Typography>\n            subheader={profileData.candidate.headline}\n            action={<IconButton aria-label=\"settings\" onClick = {() => handleClickOpenEditProfile()}>\n                      <EditIcon />\n                    </IconButton>}\n            />\n            {profileData.candidate.description || profileData.candidate.location ?\n              <CardContent sx={{pt:0}}>\n                {profileData.candidate.location?\n                <Typography alignItems='center' sx={{display:'flex'}} variant=\"body2\" color=\"text.secondary\">\n                  <PublicIcon/>{profileData.candidate.location}\n                </Typography>\n                : null}\n                {profileData.candidate.description?\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {profileData.candidate.description}\n                </Typography>\n                : null}\n              </CardContent>\n            :null}\n          </Card>\n\n          <Card sx={{ mb:2 }}>\n            <form onSubmit={handleSubmitPost}>\n              <CardContent sx={{pb:0}}>\n                <Typography sx={{fontWeight:'bold', fontSize:'15px'}} component=\"h2\">\n                  Create post\n                </Typography>\n                <TextField\n                  required\n                  label=\"What's on your mind?\"\n                  multiline\n                  rows={4}\n                  variant=\"standard\"\n                  fullWidth\n                  name=\"content\"\n                />\n              </CardContent>\n              <CardActions sx={{px:2, pb:1}}>\n                {openingsData?\n                  <TextField\n                    select\n                    name=\"openingId\"\n                    size=\"small\"\n                    label=\"Share an Opening\"\n                    sx={{width:'100%', maxWidth:'250px', mr:1}}\n                  >\n                    {openingsData.candidate.openings.map((opening, openingid) => (\n                      <MenuItem\n                        key={openingid}\n                        value={opening.id}\n                      >\n                        {opening.title}\n                      </MenuItem>\n                    ))}\n                  </TextField>\n                :null}\n                <Button variant=\"contained\" sx={{ml:'auto'}} type=\"submit\">Post</Button>\n              </CardActions>\n            </form>\n          </Card>\n\n          {postsData.candidate.posts.map((post, postid) => {return (<div>\n            <PostCard\n              key = {postid}\n              id = {post.id}\n              name = {profileData.candidate.first+\" \"+profileData.candidate.last}\n              date = {post.date}\n              content = {post.content}\n              openingId = {post.opening?post.opening.id:null}\n              job_title = {post.opening?post.opening.title:null}\n              job_description = {post.opening?post.opening.description:null}\n              job_company = {post.opening?post.opening.company.title:null}\n              job_location = {post.opening?post.opening.location:null}\n              job_employment = {post.opening?post.opening.employment?post.opening.employment.title:null:null}\n               />\n          </div>)})}\n\n          {openingsData?\n            <Card sx={{ mb: 2 }}>\n              <CardHeader sx={{py:1}}\n                title=<Typography sx={{fontWeight:'bold', fontSize:'15px'}} component=\"h2\">\n                  Job Postings\n                </Typography>\n              />\n              {openingsData.candidate.openings.map((o, openingid) => {return (<div>\n                {openingid > 0?\n                  <Divider variant=\"inset\"/>\n                  :null}\n                <JobListCard\n                  key = {openingid}\n                  id = {o.id}\n                  title = {o.title}\n                  description={o.description.length > 10 ? o.description.substring(0, 80) + \"...\" : o.description}\n                  company = {o.company.title}\n                  first = {profileData.candidate.first}\n                  last = {profileData.candidate.last}\n                  location = {o.location}\n                  salaryLow = {o.salaryLow}\n                  salaryHigh = {o.salaryHigh}\n                  employment = {o.employment.title}\n                   />\n              </div>)})}\n            </Card>\n            :null\n          }\n\n          <Dialog open={openEditExperience} onClose={handleCloseEditExperience}>\n            <DialogTitle>{action} Experience</DialogTitle>\n            <form onSubmit={handleSubmitExperience}>\n              <DialogContent>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <TextField\n                      required\n                      size=\"small\"\n                      type=\"number\"\n                      name=\"companyId\"\n                      id=\"name\"\n                      label=\"Company\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.companyId}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      required\n                      size=\"small\"\n                      name=\"title\"\n                      label=\"Title\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.title}\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      select\n                      size=\"small\"\n                      fullWidth\n                      name=\"employmentId\"\n                      label=\"Employment Type\"\n                      defaultValue={formExperienceData.employmentId?formExperienceData.employmentId:null}\n                    >\n                      {allemploymentsData.employments.map((employment,eid) => (\n                      <MenuItem\n                        key={eid}\n                        value={employment.id}\n                      >\n                        {employment.title}\n                      </MenuItem>\n                       ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      size=\"small\"\n                      name=\"location\"\n                      id=\"name\"\n                      label=\"Locaton\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.location}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider/>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      required\n                      size=\"small\"\n                      select\n                      name=\"startMonth\"\n                      id=\"name\"\n                      label=\"Start Month\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.startMonth}\n                    >\n                      {months.map((month,mid) => (\n                      <MenuItem\n                        key={mid}\n                        value={mid+1}\n                      >\n                        {month}\n                      </MenuItem>\n                       ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      required\n                      size=\"small\"\n                      type=\"number\"\n                      name=\"startYear\"\n                      id=\"name\"\n                      label=\"Start Year\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.startYear}\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      select\n                      size=\"small\"\n                      name=\"endMonth\"\n                      id=\"name\"\n                      label=\"End Month\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.endMonth}\n                    >\n                      {months.map((month,mid) => (\n                      <MenuItem\n                        key={mid}\n                        value={mid+1}\n                      >\n                        {month}\n                      </MenuItem>\n                       ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      size=\"small\"\n                      type=\"number\"\n                      name=\"endYear\"\n                      id=\"name\"\n                      label=\"End Year\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.endYear}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider/>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      size=\"small\"\n                      name=\"description\"\n                      id=\"standard-multiline-static\"\n                      label=\"Description\"\n                      multiline\n                      rows={4}\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formExperienceData.description}\n                    />\n                  </Grid>\n                </Grid>\n              </DialogContent>\n              <DialogActions>\n                {action=='Edit'?<Button onClick={handleDeleteExperience}>Delete</Button>:null}\n                <Button type=\"submit\">Submit</Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n\n          <Card sx={{ mb: 2 }}>\n            <CardHeader sx={{py:1}}\n              action={\n                <IconButton aria-label=\"edit\" onClick = {() => handleClickOpenExperience()}>\n                  <AddIcon />\n                </IconButton>\n              }\n              title=<Typography sx={{fontWeight:'bold', fontSize:'15px'}} component=\"h2\">\n                Experience\n              </Typography>\n            />\n            {experiencesData.candidate.experiences.map((exp, exp_list_index) => {\n                return(<div onClick={() => handleClickOpenExperience(exp_list_index)}>\n                {exp_list_index > 0?\n                  <Divider variant=\"inset\"/>\n                  :null}\n                  <ExperienceCard\n                    key = {exp_list_index}\n                    title = {exp.title}\n                    employment = {exp.employment?exp.employment.title:null}\n                    company = {exp.company.title}\n                    location = {exp.location}\n                    startMonth = {exp.startMonth}\n                    startYear = {exp.startYear}\n                    endMonth = {exp.endMonth}\n                    endYear = {exp.endYear}\n                    description = {exp.description}\n                  />\n                </div>)\n            })}\n          </Card>\n\n          <Dialog open={openEditEducation} onClose={handleCloseEditEducation}>\n            <DialogTitle>{action} Education</DialogTitle>\n            <form onSubmit={handleSubmitEducation}>\n              <DialogContent>\n                <Grid container spacing={2}>\n                  <Grid item xs={12}>\n                    <Autocomplete\n                      defaultValue={{label:formEducationData.collegeName,id:formEducationData.collegeId}}\n                      size=\"small\"\n                      clearOnBlur={false}\n                      name=\"collegeId\"\n                      options={allcollegesData.colleges.map((college) => {\n                        return {label:college.title,id:college.id};\n                      })}\n                      fullWidth\n                      /*onChange = {(event, value) => setSelectedCollegeId(value.id)}*/\n                      renderInput={(params) => <TextField required {...params} name=\"collegeName\" label=\"College\" />}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      size=\"small\"\n                      fullWidth\n                      name=\"majorName\"\n                      label=\"Major\"\n                      defaultValue={formEducationData.majorName}\n                    />\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <TextField\n                      select\n                      size=\"small\"\n                      fullWidth\n                      name=\"degreeId\"\n                      label=\"Degree\"\n                      defaultValue={formEducationData.degreeId?formEducationData.degreeId:null}\n                    >\n                      {alldegreesData.degrees.map((degree,did) => (\n                      <MenuItem\n                        key={did}\n                        value={degree.id}\n                      >\n                        {degree.title}\n                      </MenuItem>\n                       ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider/>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      required\n                      size=\"small\"\n                      select\n                      name=\"startMonth\"\n                      id=\"name\"\n                      label=\"Start Month\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formEducationData.startMonth}\n                    >\n                      {months.map((month,mid) => (\n                      <MenuItem\n                        key={mid}\n                        value={mid+1}\n                      >\n                        {month}\n                      </MenuItem>\n                       ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      required\n                      size=\"small\"\n                      type=\"number\"\n                      name=\"startYear\"\n                      id=\"name\"\n                      label=\"Start Year\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formEducationData.startYear}\n                    />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      select\n                      size=\"small\"\n                      name=\"endMonth\"\n                      id=\"name\"\n                      label=\"End Month\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formEducationData.endMonth}\n                    >\n                      {months.map((month,mid) => (\n                      <MenuItem\n                        key={mid}\n                        value={mid+1}\n                      >\n                        {month}\n                      </MenuItem>\n                       ))}\n                    </TextField>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <TextField\n                      size=\"small\"\n                      type=\"number\"\n                      name=\"endYear\"\n                      id=\"name\"\n                      label=\"End Year\"\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formEducationData.endYear}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Divider/>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      size=\"small\"\n                      name=\"description\"\n                      id=\"standard-multiline-static\"\n                      label=\"Description\"\n                      multiline\n                      rows={4}\n                      fullWidth\n                      variant=\"outlined\"\n                      defaultValue={formEducationData.description}\n                    />\n                  </Grid>\n                </Grid>\n              </DialogContent>\n              <DialogActions>\n                {action=='Edit'?<Button onClick={handleDeleteEducation}>Delete</Button>:null}\n                <Button type=\"submit\">Submit</Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n\n          <Card sx={{ mb: 2 }}>\n            <CardHeader sx={{py:1}}\n              action={\n                <IconButton aria-label=\"edit\" onClick = {() => handleClickOpenEducation()}>\n                  <AddIcon />\n                </IconButton>\n              }\n              title=<Typography sx={{fontWeight:'bold', fontSize:'15px'}} component=\"h2\">\n                Education\n              </Typography>\n            />\n            {educationsData.candidate.educations.map((edu, edu_list_index) => {\n                return(<div onClick={() => handleClickOpenEducation(edu_list_index)}>\n                {edu_list_index > 0?\n                  <Divider variant=\"inset\"/>\n                  :null}\n                  <ExperienceCard\n                    key = {edu_list_index}\n                    title = {edu.majorName}\n                    company = {edu.collegeName}\n                    employment = {edu.degree.title}\n                    startMonth = {edu.startMonth}\n                    startYear = {edu.startYear}\n                    endMonth = {edu.endMonth}\n                    endYear = {edu.endYear}\n                    description = {edu.description}\n                  />\n                </div>)\n            })}\n          </Card>\n\n          <Dialog open={openEditSkill} onClose={handleCloseEditSkill}>\n            <DialogTitle>Add Skill</DialogTitle>\n            <form onSubmit={handleSubmitSkill}>\n              <DialogContent>\n                <Autocomplete\n                  name=\"skill_id\"\n                  options={allskillsData.skills.map((skill) => {\n                    return {label:skill.title,id:skill.id};\n                  })}\n                  sx={{ width: 300 }}\n                  onChange = {(event, value) => setSelectedSkillId(value.id)}\n                  renderInput={(params) => <TextField {...params} label=\"Skill\" />}\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button type=\"submit\">Add</Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n\n          <Card sx={{mb:2}}>\n            <CardHeader sx={{ pb: 0, pt:1 }}\n              action={\n                <IconButton aria-label=\"edit\" onClick = {() => handleClickOpenSkill()}>\n                  <AddIcon />\n                </IconButton>\n              }\n              title=<Typography sx={{fontWeight:'bold', fontSize:'15px'}} component=\"h2\">\n                Skills\n              </Typography>\n            />\n            <CardContent>\n              <Grid container spacing={1}>\n                {skillsData?\n                  skillsData.candidate.skills.map((skill, skill_list_index) => {\n                    return(<Grid item><Chip key = {skill_list_index} label={skill.title} onDelete={() => handleRemoveSkill(skill.id)} /></Grid>)\n                  })\n                  :\"No skills selected\"}\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>);\n}\n"]},"metadata":{},"sourceType":"module"}