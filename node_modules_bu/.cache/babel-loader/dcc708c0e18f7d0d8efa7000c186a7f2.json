{"ast":null,"code":"var _jsxFileName = \"/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Search/Jobs.js\",\n    _s = $RefreshSig$();\n\nimport { React, Fragment, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport axios from \"axios\"; // import Box from \"@mui/material/Box\";\n\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Divider from \"@mui/material/Divider\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Input from \"@mui/material/Input\";\nimport InputAdornment from '@mui/material/InputAdornment';\nimport IconButton from '@mui/material/IconButton';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport WorkIcon from '@mui/icons-material/Work';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport AccessTimeFilledIcon from '@mui/icons-material/AccessTimeFilled';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport Chip from '@mui/material/Chip';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\nimport JobCard from \"../Card/JobCard\";\nimport JobSingleCard from \"../Card/JobSingleCard\";\nimport CompanyCard from \"../Card/CompanyCard\";\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\nimport { Card, CardContent, CardHeader, CardActions, CardActionArea } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_OPENINGS = gql`\n  query Openings{\n          openings{\n            id\n            title\n            description\n            location\n            candidateId\n            salaryLow\n            salaryHigh\n            employment {\n              title\n            }\n            candidateId\n            candidate {\n              first\n              last\n            }\n            companyId\n            company{\n              title\n            }\n          }\n        }`;\nconst GET_SINGLE_OPENING = gql`\n  query Opening($id:Int!){\n    opening(id:$id){\n      id\n      title\n      description\n      location\n      startMonth\n      startYear\n      salaryLow\n      salaryHigh\n      candidateId\n      employment {\n        title\n      }\n      candidateId\n      candidate {\n        first\n        last\n      }\n      companyId\n      company{\n        title\n        description\n        website\n      }\n    }\n  }`;\nconst CREATE_APPLICATION = gql`\nmutation CreateApplication($date:Int!, $openingId:Int!, $candidateId:Int!,$status:Int!) {\n      createApplication(date:$date, openingId: $openingId, candidateId: $candidateId, status: $status){\n        id\n      }\n  }`;\nexport default function Jobs() {\n  _s();\n\n  const uid = +sessionStorage.getItem(\"uid\");\n  let search = window.location.search;\n  let params = new URLSearchParams(search);\n  let query = params.get('q');\n  let location = params.get('l');\n  const {\n    loading: openingsLoading,\n    data: openingsData\n  } = useQuery(GET_OPENINGS, {\n    variables: {\n      query: query,\n      location: location\n    }\n  });\n  const [getSingleOpening, {\n    data: openingData,\n    loading: openingLoading\n  }] = useLazyQuery(GET_SINGLE_OPENING);\n  const [createApplication, {\n    data: applicationData,\n    loading: applicationLoading\n  }] = useMutation(CREATE_APPLICATION);\n  if (openingsLoading) return 'Loading...';\n\n  if (openingData) {\n    console.log(openingData.opening);\n  }\n  /* <Paper square sx={{mb:1}}>\n            <Container>\n              <Box\n                component=\"form\"\n                sx={{\n                  '& > :not(style)': { m: 1 },\n                }}\n              >\n                <TextField\n                  placeholder=\"Job title or keywords\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  name=\"q\"\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <SearchIcon/>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n                <TextField\n                  placeholder=\"Location\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  name=\"l\"\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <LocationOnIcon/>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n                <Button variant=\"contained\" type=\"submit\">Search</Button>\n              </Box>\n            </Container>\n          </Paper>\n          <Chip size=\"small\" sx={{ ml:1, mb:1 }} label=\"Post a free job\" component=\"a\" href=\"/post\" color=\"success\" clickable />*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      sx: {\n        pt: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        sx: {\n          my: {\n            xs: 2,\n            md: 0\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 4,\n          sx: {\n            px: 1\n          },\n          children: openingsData ? openingsData.openings.map((opening, id) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginBottom: '12px'\n              },\n              onClick: () => getSingleOpening({\n                variables: {\n                  id: opening.id\n                }\n              }),\n              children: /*#__PURE__*/_jsxDEV(JobCard, {\n                candidate_id: opening.candidateId,\n                title: opening.title,\n                description: opening.description.length > 10 ? opening.description.substring(0, 80) + \"...\" : opening.description,\n                first: opening.candidate.first,\n                last: opening.candidate.last,\n                location: opening.location,\n                company: opening.company.title,\n                employment: opening.employment.title\n              }, id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 87\n            }, this);\n          }) : \"No job openings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 8,\n          children: openingData ? /*#__PURE__*/_jsxDEV(JobSingleCard, {\n            id: openingData.opening.id,\n            title: openingData.opening.title,\n            company: openingData.opening.company.title,\n            companyId: openingData.opening.companyId,\n            companyDescription: openingData.opening.company.description,\n            description: openingData.opening.description,\n            website: openingData.opening.company.website,\n            employment: openingData.opening.employment.title,\n            location: openingData.opening.location,\n            salaryLow: openingData.opening.salaryLow,\n            salaryHigh: openingData.opening.salaryHigh,\n            candidateId: openingData.opening.candidateId,\n            first: openingData.opening.candidate.first,\n            last: openingData.opening.candidate.last\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Jobs, \"jdNKsR30cMCx8PPDHyffJcgAqFQ=\", false, function () {\n  return [useQuery, useLazyQuery, useMutation];\n});\n\n_c = Jobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"sources":["/Users/alexcastro/Dropbox/School/Fordham/Grad/Classes/Semester 3/Capstone Project/repos/frontend/src/components/Search/Jobs.js"],"names":["React","Fragment","useState","useEffect","useHistory","axios","List","ListItem","ListItemButton","ListItemAvatar","Avatar","ListItemText","Divider","Typography","Grid","Container","Box","Stack","Input","InputAdornment","IconButton","FavoriteIcon","ShareIcon","SearchIcon","LocationOnIcon","WorkIcon","AttachMoneyIcon","AccessTimeFilledIcon","Paper","Button","TextField","Dialog","Chip","DialogActions","DialogContent","DialogContentText","DialogTitle","Link","Alert","JobCard","JobSingleCard","CompanyCard","gql","useQuery","useLazyQuery","useMutation","Card","CardContent","CardHeader","CardActions","CardActionArea","GET_OPENINGS","GET_SINGLE_OPENING","CREATE_APPLICATION","Jobs","uid","sessionStorage","getItem","search","window","location","params","URLSearchParams","query","get","loading","openingsLoading","data","openingsData","variables","getSingleOpening","openingData","openingLoading","createApplication","applicationData","applicationLoading","console","log","opening","pt","my","xs","md","px","openings","map","id","marginBottom","candidateId","title","description","length","substring","candidate","first","last","company","employment","companyId","website","salaryLow","salaryHigh"],"mappings":"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","sourcesContent":["import {React, Fragment, useState, useEffect} from \"react\";\nimport { useHistory } from \"react-router\";\nimport axios from \"axios\"\n// import Box from \"@mui/material/Box\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Divider from \"@mui/material/Divider\";\n\nimport Typography from \"@mui/material/Typography\";\nimport Grid from '@mui/material/Grid';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\n\nimport Input from \"@mui/material/Input\";\nimport InputAdornment from '@mui/material/InputAdornment';\nimport IconButton from '@mui/material/IconButton';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport ShareIcon from '@mui/icons-material/Share';\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\nimport WorkIcon from '@mui/icons-material/Work';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport AccessTimeFilledIcon from '@mui/icons-material/AccessTimeFilled';\n\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport Chip from '@mui/material/Chip';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Link from '@mui/material/Link';\nimport Alert from '@mui/material/Alert';\n\nimport JobCard from \"../Card/JobCard\";\nimport JobSingleCard from \"../Card/JobSingleCard\";\nimport CompanyCard from \"../Card/CompanyCard\";\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\n\nimport {Card, CardContent, CardHeader, CardActions, CardActionArea } from '@mui/material';\n\nconst GET_OPENINGS = gql`\n  query Openings{\n          openings{\n            id\n            title\n            description\n            location\n            candidateId\n            salaryLow\n            salaryHigh\n            employment {\n              title\n            }\n            candidateId\n            candidate {\n              first\n              last\n            }\n            companyId\n            company{\n              title\n            }\n          }\n        }`;\n\nconst GET_SINGLE_OPENING = gql`\n  query Opening($id:Int!){\n    opening(id:$id){\n      id\n      title\n      description\n      location\n      startMonth\n      startYear\n      salaryLow\n      salaryHigh\n      candidateId\n      employment {\n        title\n      }\n      candidateId\n      candidate {\n        first\n        last\n      }\n      companyId\n      company{\n        title\n        description\n        website\n      }\n    }\n  }`;\n\nconst CREATE_APPLICATION = gql`\nmutation CreateApplication($date:Int!, $openingId:Int!, $candidateId:Int!,$status:Int!) {\n      createApplication(date:$date, openingId: $openingId, candidateId: $candidateId, status: $status){\n        id\n      }\n  }`;\n\nexport default function Jobs() {\n  const uid = +sessionStorage.getItem(\"uid\");\n  let search = window.location.search;\n  let params = new URLSearchParams(search);\n\n  let query = params.get('q');\n  let location = params.get('l');\n\n  const { loading:openingsLoading, data:openingsData } = useQuery(GET_OPENINGS, {variables:{query: query, location: location}});\n\n  const [getSingleOpening,\n    { data:openingData, loading:openingLoading }]\n     = useLazyQuery(GET_SINGLE_OPENING);\n\n  const [createApplication, { data:applicationData, loading:applicationLoading }] = useMutation(CREATE_APPLICATION);\n\n  if (openingsLoading) return 'Loading...';\n\n  if (openingData) {\n    console.log(openingData.opening);\n  }\n\n/* <Paper square sx={{mb:1}}>\n          <Container>\n            <Box\n              component=\"form\"\n              sx={{\n                '& > :not(style)': { m: 1 },\n              }}\n            >\n              <TextField\n                placeholder=\"Job title or keywords\"\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"q\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SearchIcon/>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <TextField\n                placeholder=\"Location\"\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"l\"\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <LocationOnIcon/>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <Button variant=\"contained\" type=\"submit\">Search</Button>\n            </Box>\n          </Container>\n        </Paper>\n        <Chip size=\"small\" sx={{ ml:1, mb:1 }} label=\"Post a free job\" component=\"a\" href=\"/post\" color=\"success\" clickable />*/\n  return (<div>\n          <Container sx={{pt:2}}>\n            <Grid container sx={{ my: { xs: 2, md: 0 } }}>\n              <Grid item md={4} sx={{px:1}}>\n                    {openingsData?openingsData.openings.map((opening, id) => {return (<div style={{marginBottom:'12px'}} onClick={() => getSingleOpening({ variables: { id: opening.id } })}>\n                      <JobCard\n                        key = {id}\n                        candidate_id = {opening.candidateId}\n                        title = {opening.title}\n                        description={opening.description.length > 10 ? opening.description.substring(0, 80) + \"...\" : opening.description}\n                        first = {opening.candidate.first}\n                        last = {opening.candidate.last}\n                        location = {opening.location}\n                        company = {opening.company.title}\n                        employment = {opening.employment.title} />\n                      </div>)}):\"No job openings\"}\n              </Grid>\n              <Grid item md={8}>\n              {openingData?\n                <JobSingleCard\n                  id = {openingData.opening.id}\n                  title = {openingData.opening.title}\n                  company = {openingData.opening.company.title}\n                  companyId = {openingData.opening.companyId}\n                  companyDescription = {openingData.opening.company.description}\n                  description = {openingData.opening.description}\n                  website = {openingData.opening.company.website}\n                  employment = {openingData.opening.employment.title}\n                  location = {openingData.opening.location}\n                  salaryLow = {openingData.opening.salaryLow}\n                  salaryHigh = {openingData.opening.salaryHigh}\n                  candidateId = {openingData.opening.candidateId}\n                  first = {openingData.opening.candidate.first}\n                  last = {openingData.opening.candidate.last} />\n                :null}\n              </Grid>\n            </Grid>\n          </Container></div>);\n}\n"]},"metadata":{},"sourceType":"module"}